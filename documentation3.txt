
-----------------------------------------------------------------------

# p146- LRU cache
#https://leetcode.com/problems/lru-cache/
# Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

# Implement the LRUCache class:

# LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
# int get(int key) Return the value of the key if the key exists, otherwise return -1.
# void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
# The functions get and put must each run in O(1) average time complexity.

class Node:
    def __init__(self, key, val):
        self.key , self.val = key, val
        self.prev, self.next = None      #pointers for previous node and next node


class LRUCache:
    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {}    #hashmap, map key to node
        
        # left = LRU, right = most recent
        self.left, self.right = Node(0,0), Node(0,0)   #dummy pointers for least recently used(LRU), and most recently used 
        self.left.next, self.right.prev = self.right, self.left  #link the nodes, put a new node in the middle

    # remove node from list (linked list), helper function
    def remove(self, node):  
        prev, nxt = node.prev, node.nxt
        prev.next, nxt.prev = nxt, prev          # removing from the middle of the linked list

    # insert node at right of the node in the linked list, helper function
    def insert(self, node):        
        prev, nxt = self.right.prev, self.right
        prev.next = nxt.prev = node
        node.prev, node.next = prev, nxt

    def get(self, key: int) -> int:
        if key in self.cache:
            #TODO: update the most recent
            self.remove(self.cache[key])
            self.insert(self.cache[key])
            return self.cache[key].val
        return -1    
        

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key, value)   #include in the hashmap and pointer to node    
        self.insert(self.cache[key])         # include in the right of the double linked list

        if len(self.cache)> self.cap:
            # remove from list and delete the LRU from the hash map
            lru = self.left.next     #least recently used from the linked list
            self.remove(lru)             # remove from list
            del self.cache[lru.key]      # remove from cache
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

---------------------------------------------------------------------

#p824- Goat Latin
# https://leetcode.com/problems/goat-latin/
# You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.

# We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:

# If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word.
# For example, the word "apple" becomes "applema".
# If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma".
# For example, the word "goat" becomes "oatgma".
# Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
# For example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on.
# Return the final sentence representing the conversion from sentence to Goat Latin.

# Example 1:

# Input: sentence = "I speak Goat Latin"
# Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
# Example 2:

# Input: sentence = "The quick brown fox jumped over the lazy dog"
# Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"

class Solution:
    def toGoatLatin(self, sentence: str) -> str:
        vowels = ["a","e","i","o","u", "A","E","I","O","U"]       
        wordlist = sentence.split(" ")
            
        count = 0
        new_sentence = ""
        for word in wordlist:
            count +=1
            if list(word)[0] in vowels:
                word = word+"ma"
            else:
                word = word.replace(list(word)[0],"",1) +list(word)[0] + "ma"
            
            word = word+ count * "a"
            
            new_sentence += str(word)
            if not count == len(wordlist):
                new_sentence += " " 
          
        return new_sentence

----------------------------------------------------

# 56. Merge Intervals
# Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
# Example 1:

# Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
# Output: [[1,6],[8,10],[15,18]]
# Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
# Example 2:

# Input: intervals = [[1,4],[4,5]]
# Output: [[1,5]]
# Explanation: Intervals [1,4] and [4,5] are considered overlapping.


# class Solution:
#     def merge(self, intervals: List[List[int]]) -> List[List[int]]:

# O(nlogn) , because it's sorting
def merge(intervals):
    intervals.sort(key = lambda i : i[0])  #sort by starting point

    output = [intervals[0]]

    for start, end in intervals[1:]:
        lastend = output[-1][1]
        if start <= output[-1][1]:
            output[-1][1] = max(end, lastend)  #for cases like [1,6], [4,5] --> [1,6]
        else:
            output.append([start,end])

    return output 

intervals = [[1,3],[2,6],[8,10],[15,18]]
print(merge(intervals)) 

---------------------------------------------------------------------------------------------------

# 2104. Sum of Subarray Ranges
# You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.
# Return the sum of all subarray ranges of nums.
# A subarray is a contiguous non-empty sequence of elements within an array.

# Example 1:

# Input: nums = [1,2,3]
# Output: 4
# Explanation: The 6 subarrays of nums are the following:
# [1], range = largest - smallest = 1 - 1 = 0 
# [2], range = 2 - 2 = 0
# [3], range = 3 - 3 = 0
# [1,2], range = 2 - 1 = 1
# [2,3], range = 3 - 2 = 1
# [1,2,3], range = 3 - 1 = 2
# So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
# Example 2:

# Input: nums = [1,3,3]
# Output: 4
# Explanation: The 6 subarrays of nums are the following:
# [1], range = largest - smallest = 1 - 1 = 0
# [3], range = 3 - 3 = 0
# [3], range = 3 - 3 = 0
# [1,3], range = 3 - 1 = 2
# [3,3], range = 3 - 3 = 0
# [1,3,3], range = 3 - 1 = 2
# So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
# Example 3:

# Input: nums = [4,-2,-3,4,1]
# Output: 59
# Explanation: The sum of all subarray ranges of nums is 59.
#----------------------concept------------------------------------------

# What can monotonous increase stack do?
# (1) find the previous less element of each element in a vector with O(n) time:
# (2) find the next less element of each element in a vector with O(n) time:
# How can the monotonous increase stack be applied to this problem?
# For example:
# Consider the element 3 in the following vector:

#                             [2, 9, 7, 8, 3, 4, 6, 1]
# 			     |                    |
# 	             the previous less       the next less 
# 	                element of 3          element of 3

# After finding both NLE and PLE of 3, we can determine the
# distance between 3 and 2(previous less) , and the distance between 3 and 1(next less).
# In this example, the distance is 4 and 3 respectively.
# How many subarrays with 3 being its minimum value?
# The answer is 4*3.

# 9 7 8 3 
# 9 7 8 3 4 
# 9 7 8 3 4 6 
# 7 8 3 
# 7 8 3 4 
# 7 8 3 4 6 
# 8 3 
# 8 3 4 
# 8 3 4 6 
# 3 
# 3 4 
# 3 4 6
# How much the element 3 contributes to the final answer?
# It is 3*(4*3).
# The last thing that needs to be mentioned for handling duplicate elements:
# Method: Set strict less and non-strict less(less than or equal to) for finding NLE and PLE respectively. The order doesn't matter.

# class Solution:
#     def subArrayRanges(self, nums: List[int]) -> int:

time-- O(n), space-- O(n)
def subArrayRanges(nums):    
    res = 0
    min_stack, max_stack = [], []
    n = len(nums)
    nums.append(0)

    for i, num in enumerate(nums):
        while min_stack and (i == n or num < nums[min_stack[-1]]):
            top = min_stack.pop()
            starts = top - min_stack[-1] if min_stack else top + 1
            ends = i - top
            res -= starts * ends * nums[top]
            
        min_stack.append(i)
        
        while max_stack and (i == n or num > nums[max_stack[-1]]):
            top = max_stack.pop()
            starts = top - max_stack[-1] if max_stack else top + 1
            ends = i - top
            res += starts * ends * nums[top]
            
        max_stack.append(i)
    
    return res


###-------------------- OUTPUT-------------- ###

# nums = [4,-2,-3,4,1]
# print(subArrayRanges(nums))

# nums :  [4, -2, -3, 4, 1, 0]
# -----------------------------------------------------------
# i, num --  0 4
# min_stack :  [0]
# max_stack :  [0]
# -----------------------------------------------------------
# i, num --  1 -2
# i , num,  nums[min_stack[-1]]--- 1 -2 4
# top =  0
# starts=  1 ends=  1
# starts * ends * nums[top]   4
# res=  -4
# min_stack :  [1]
# max_stack :  [0, 1]
# -----------------------------------------------------------
# i, num --  2 -3
# i , num,  nums[min_stack[-1]]--- 2 -3 -2
# top =  1
# starts=  2 ends=  1
# starts * ends * nums[top]   -4
# res=  0
# min_stack :  [2]
# max_stack :  [0, 1, 2]
# -----------------------------------------------------------
# i, num --  3 4
# min_stack :  [2, 3]
# i, num,  nums[max_stack[-1]]--- 3 4 -3
# top in max =  2
# in max starts=  1 ends=  1
# starts * ends * nums[top]   -3
# res=  -3
# i, num,  nums[max_stack[-1]]--- 3 4 -2
# top in max =  1
# in max starts=  1 ends=  2
# starts * ends * nums[top]   -4
# res=  -7
# max_stack :  [0, 3]
# -----------------------------------------------------------
# i, num --  4 1
# i , num,  nums[min_stack[-1]]--- 4 1 4
# top =  3
# starts=  1 ends=  1
# starts * ends * nums[top]   4
# res=  -11
# min_stack :  [2, 4]
# max_stack :  [0, 3, 4]
# -----------------------------------------------------------
# i, num --  5 0
# i , num,  nums[min_stack[-1]]--- 5 0 1
# top =  4
# starts=  2 ends=  1
# starts * ends * nums[top]   2
# res=  -13
# i , num,  nums[min_stack[-1]]--- 5 0 -3
# top =  2
# starts=  3 ends=  3
# starts * ends * nums[top]   -27
# res=  14
# min_stack :  [5]
# i, num,  nums[max_stack[-1]]--- 5 0 1
# top in max =  4
# in max starts=  1 ends=  1
# starts * ends * nums[top]   1
# res=  15
# i, num,  nums[max_stack[-1]]--- 5 0 4
# top in max =  3
# in max starts=  3 ends=  2
# starts * ends * nums[top]   24
# res=  39
# i, num,  nums[max_stack[-1]]--- 5 0 4
# top in max =  0
# in max starts=  1 ends=  5
# starts * ends * nums[top]   20
# res=  59
# max_stack :  [5]
# 59