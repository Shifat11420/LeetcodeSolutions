                           BIT MANIPULATION


Problem - 136

# Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
# You must implement a solution with a linear runtime complexity and use only constant extra space.

# Example 1:
# Input: nums = [2,2,1]
# Output: 1

# Example 2:
# Input: nums = [4,1,2,1,2]
# Output: 4

# Example 3:
# Input: nums = [1]
# Output: 1

# XOR of bit representation, 1^1 = 0, 0^0 = 0, 1^0 =1, 0^1 = 0
# Complexity: time O(n), space O(1)
from typing import List

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        res  = 0  # n^0 = n
        for n in nums:
            res = n ^ res
        return res           # res would have that single number that does not match
-------------------------------------------------------------------------------------------------------------------

Problem - 191

# Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).
# Note:
# Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
# In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 
# Example 1:
# Input: n = 00000000000000000000000000001011
# Output: 3
# Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

# Example 2:
# Input: n = 00000000000000000000000010000000
# Output: 1
# Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

# Example 3:
# Input: n = 11111111111111111111111111111101
# Output: 31
# Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 

# Complexity: time O(32)~ O(1)
# problem is we look at every bit e.g. 1000000001 all of them 0's and 1's
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            res += n%2     # 0 or 1
            n = n>>1       # bit shift  1001 >>1 ----> 100
        return res
    
    
# Complexity: time O(32)~ O(1)
# we look at only bit 1 e.g. 1000000001, just 1's
# subtracting by itself--> getting rid of a bit
# weird trick
class Solution:
    def hammingWeight(self, n: int) -> int:    
        res = 0
        while n:
            n = n & (n-1)
            res += 1
        return res    
    
# still prefer first solution since complexity is same     
----------------------------------------------------------------------------

Problem - 338
# Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

# Example 1:
# Input: n = 2
# Output: [0,1,1]
# Explanation:
# 0 --> 0
# 1 --> 1
# 2 --> 10

# Example 2:
# Input: n = 5
# Output: [0,1,1,2,1,2]
# Explanation:
# 0 --> 0
# 1 --> 1
# 2 --> 10
# 3 --> 11
# 4 --> 100
# 5 --> 101

# Dynamic Programming
## offset = most significant bit we have reached so far [1,2,4,8,... ]
# Complexity: time O(n)

class Solution:
    def countBits(self, n: int) -> List[int]:
        dp = [0]* (n+1)
        offset = 1
        
        for i in range(1, n+1):
            if offset*2 == i:
                offset = i
            dp[i] = 1 + dp[i-offset]
            
        return dp    
 ----------------------------------------------------------------------------------

Problem - 190
# Reverse bits of a given 32 bits unsigned integer.
# Note:
# Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
# In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 
# Example 1:
# Input: n = 00000010100101000001111010011100
# Output:    964176192 (00111001011110000010100101000000)
# Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

# Example 2:
# Input: n = 11111111111111111111111111111101
# Output:   3221225471 (10111111111111111111111111111111)
# Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 
# n>>i n shifting to ith position, then 
# (n>>i)&1, & operation  gives the bit 0 or 1
# | is logic OR
# Complexity: time O(1), space O(1)

class Solution:
    def reverseBits(self, n: int) -> int:
        res = 0
        for i in range(32):
            bit = (n >> i) & 1
            res = res | (bit << (31-i))         # start at the largest bit and walk on our way down, for i=0, put it in the 31th spot
        return res    
---------------------------------------------------------------------------------------------------

Problem - 268

# Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

# Example 1:
# Input: nums = [3,0,1]
# Output: 2
# Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

# Example 2:
# Input: nums = [0,1]
# Output: 2
# Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

# Example 3:
# Input: nums = [9,6,4,2,3,5,7,0,1]
# Output: 8
# Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 
# XOR --> 1^1=0 , 0^1 = 1, 1 if different, 0 if same in bits; 0^n = n, O XOR any number--> that number
# Complexity: time O(2n)~ O(n), space O(1)

from typing import List

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        res = len(nums)
        
        for i in range(len(nums)):
            res += (i - nums[i])
        return res    
------------------------------------------------------------------------

Problem - 371

// Given two integers a and b, return the sum of the two integers without using the operators + and -.

// Example 1:
// Input: a = 1, b = 2
// Output: 3

// Example 2:
// Input: a = 2, b = 3
// Output: 5
 
// # python integers are arbitrarily larger, not 32 bits, so this algorithm runs into problems, hence using JAVA 

// # XOR and bit manipulation
// # & for the carry from (1 XOR 1), shift it to the right
// # loop the process until & returns all zeroes
// # Complexity: time O(1), worst for big numbers O(n)

class Solution {
    public int getSum(int a, int b) {
        while (b!=0){
            int tmp = (a&b)<<1;
            a = a ^ b;
            b = tmp;
        }
        return a;        
    }
} 
------------------------------------------------------------------------

Problem - 7
# Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
# Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

# Example 1:
# Input: x = 123
# Output: 321

# Example 2:
# Input: x = -123
# Output: -321

# Example 3:
# Input: x = 120
# Output: 21

import math

class Solution:
    def reverse(self, x: int) -> int:
        # integer.MAX_VALUE =  2147483647 (end with 7)
        # integer.MIN_VALUE = -2147483648 (end with 8)
        MIN = -2147483648   # -2^31
        MAX =  2147483647   #  2^31-1
        
        res = 0
        while x:
            digit = int(math.fmod(x,10))   # since -1%10=9, int(math.fmod(-1,10)) = -1
            x = int(x/10)                  # since -1//10 = -1, int(-1/10) = 0
            
            if (res > MAX//10) or (res == MAX //10 and digit >= MAX % 10):
                return 0
            if (res < MIN//10) or (res == MIN //10 and digit <= MIN % 10):
                return 0
            res = (res * 10) + digit
        return res    
-------------------------------------------------------------------------------------------        



        