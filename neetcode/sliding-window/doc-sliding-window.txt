                                                SLIDING WINDOW


problem - 121
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
# You are given an array prices where prices[i] is the price of a given stock on the ith day.
# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

# Example 1:
# Input: prices = [7,1,5,3,6,4]
# Output: 5
# Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
# Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

from typing import List
## two pointer
# Complexity: time o(n), space O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxprofit = 0           
        l, r = 0, 1  #left = buy, right = sell
        
        while r<len(prices):
            if prices[r]>prices[l]:
                profit =  prices[r]-prices[l]
                maxprofit = max(maxprofit, profit)
            else:
                l=r                ##important step
            r +=1           
        return maxprofit     
--------------------------------------------------------------------------------

problem - 3
#https://leetcode.com/problems/longest-substring-without-repeating-characters/

# 3. Longest Substring Without Repeating Characters
# Given a string s, find the length of the longest substring without repeating characters.
 
# Example 1:
# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.

#Complexity: time O(n), space O(n) (for set)
# two pointer
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:        
        l = 0
        charSet = set()    # use set to find duplicates
        res = 0

        for r in range(len(s)):
            if s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])    
            res = max(res, r-l+1)
        return res

s = "abcabcbb"
new = Solution
print(new().lengthOfLongestSubstring(s))        

-------------------------------------------------------------------------------

problem - 424
# You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
# Return the length of the longest substring containing the same letter you can get after performing the above operations.

# Example 1:
# Input: s = "ABAB", k = 2
# Output: 4
# Explanation: Replace the two 'A's with two 'B's or vice versa.

# Example 2:
# Input: s = "AABABBA", k = 1
# Output: 4
# Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
# The substring "BBBB" has the longest repeating letters, which is 4.


# hashmap, two pointer
# Complexity: time O(26*n) ---> O(n)
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        res = 0
        l = 0

        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0)
            while (r-l+1) - max(count.values()) > k :
                count[s[l]] -= 1
                l += 1
            res = max(res, r-l+1)
        return res 

#more efficient solution
# Complexity: time O(n)
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        res = 0
        l = 0
        maxf = 0

        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0)
            maxf = max(maxf, count[s[r]])
            while (r-l+1) - maxf > k :
                count[s[l]] -= 1
                l += 1
            res = max(res, r-l+1)
        return res 

s = "AABABBA"
k = 1
new = Solution
print(new().characterReplacement(s,k))           
---------------------------------------------------------------------------

Problem - 567
# Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
# In other words, return true if one of s1's permutations is the substring of s2.

# Example 1:
# Input: s1 = "ab", s2 = "eidbaooo"
# Output: true
# Explanation: s2 contains one permutation of s1 ("ba").

# Example 2:
# Input: s1 = "ab", s2 = "eidboaoo"
# Output: false

# Complexity: time O(n), space O(1)
from collections import Counter

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1)>len(s2):
            return False

        count1, count2 = {}, {}
        for c in range(len(s1)):
            count1[s1[c]] = 1 + count1.get(s1[c],0)    
            count2[s2[c]] = 1 + count2.get(s2[c],0)

        if count1 == count2:
            return True

        l = 0
        window = len(s1)
        for r in range(window, len(s2)):
            count2[s2[l]] -= 1
            if count2[s2[l]] == 0:
                count2.pop(s2[l])
            count2[s2[r]] = 1 + count2.get(s2[r],0)
            if count1 == count2:
                return True
            l += 1     
        return False
        
s1="hello"
s2="ooolleoooleh"  
new = Solution
print(new().checkInclusion(s1, s2))    
--------------------------------------------------------------------------------------------------

Problem - 76
# Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
# The testcases will be generated such that the answer is unique.
# A substring is a contiguous sequence of characters within the string.

# Example 1:
# Input: s = "ADOBECODEBANC", t = "ABC"
# Output: "BANC"
# Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

# Example 2:
# Input: s = "a", t = "a"
# Output: "a"
# Explanation: The entire string s is the minimum window.

# Example 3:
# Input: s = "a", t = "aa"
# Output: ""
# Explanation: Both 'a's from t must be included in the window.
# Since the largest window of s only has one 'a', return empty string.


#Complexity : time O(n)
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if t == "":
            return ""

        countT, window = {}, {}
        for c in t:
            countT[c] = 1 + countT.get(c, 0)

        have, need = 0, len(countT)
        res, reslen = [-1, -1], float("infinity")
        l = 0
        for r in range(len(s)):
            c = s[r]
            window[c] = 1 + window.get(c, 0)

            # adding to "have" so that we can have a string containong all of t string
            if c in countT and countT[c] == window[c]:
                have += 1

            while have == need:   ## we have what we need, i. e. required string is there, now check the length
                ## update result
                if (r-l+1) < reslen:
                    res = [l, r]
                    reslen = r - l +1

                ## pop from the left of the window
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:   # if anything poped was a character od t, decrease 'have' and go to next for loop
                    have -= 1
                l += 1
        l, r = res        
        return s[l:r+1] if reslen != float("infinity") else ""            

s = "ADOBECODEBANC"
t = "ABC"        
new = Solution
print(new().minWindow(s,t))
--------------------------------------------------------------------------------------------------

Problem - 239
# You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
# Return the max sliding window.

# Example 1:
# Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
# Output: [3,3,5,5,6,7]
# Explanation: 
# Window position                Max
# ---------------               -----
# [1  3  -1] -3  5  3  6  7       3
#  1 [3  -1  -3] 5  3  6  7       3
#  1  3 [-1  -3  5] 3  6  7       5
#  1  3  -1 [-3  5  3] 6  7       5
#  1  3  -1  -3 [5  3  6] 7       6
#  1  3  -1  -3  5 [3  6  7]      7

# Example 2:
# Input: nums = [1], k = 1
# Output: [1]

# monotonically decreasing queue, deque
# reason for using queue, not stack is, we want to add and remove from the beginning
# Complexity : time O(n), space O(n)

import collections
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        q = collections.deque()
        l = r = 0
        output = []

        while r < len(nums):
            # pop smaller values from q
            while q and nums[q[-1]] < nums[r]:
                q.pop()
            q.append(r)

            # remove left value from window
            if l > q[0]:
                q.popleft()

            if r+1 >= k:
                output.append(nums[q[0]])
                l += 1
            r += 1
        return output            

nums = [1,3,-1,-3,5,3,6,7]
k = 3
new = Solution
print(new().maxSlidingWindow(nums, k))      
--------------------------------------------------------------------------------------------


