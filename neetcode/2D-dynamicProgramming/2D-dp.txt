                                2D DYNAMIC PROGRAMMING


Problem - 62
# There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
# Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
# The test cases are generated so that the answer will be less than or equal to 2 * 109.

# Example 1:
# Input: m = 3, n = 7
# Output: 28

# Example 2:
# Input: m = 3, n = 2
# Output: 3
# Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
# 1. Right -> Down -> Down
# 2. Down -> Down -> Right
# 3. Down -> Right -> Down
 
# Complexity: time O(n*m), space O(n), n = length of a row
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        row = [1] * n
        
        for i in range(m-1):          # expect the row
            newRow = [1] * n
            for j in range(n-2, -1, -1):    # excent the last one, go reverse
                newRow[j] = newRow[j+1] + row[j]  # right + below
            row = newRow
            
        return row[0]  
------------------------------------------------------------------------------------------

Problem - 1143
# Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
# A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
# For example, "ace" is a subsequence of "abcde".
# A common subsequence of two strings is a subsequence that is common to both strings. 

# Example 1:
# Input: text1 = "abcde", text2 = "ace" 
# Output: 3  
# Explanation: The longest common subsequence is "ace" and its length is 3.

# Example 2:
# Input: text1 = "abc", text2 = "abc"
# Output: 3
# Explanation: The longest common subsequence is "abc" and its length is 3.

# Example 3:
# Input: text1 = "abc", text2 = "def"
# Output: 0
# Explanation: There is no such common subsequence, so the result is 0.

# Bottom up dP solution
# Complexity: time O(n*m), space O(n*m)
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        dp = [[0 for j in range(len(text2)+1)] for i in range(len(text1)+1)]   # extra row and column with zeroes
        
        for i in range(len(text1)-1, -1, -1):
            for j in range(len(text2)-1, -1, -1):
                if text1[i] == text2[j]:
                    dp[i][j] = 1+dp[i+1][j+1]       # if matches,go diagonal
                else:    
                    dp[i][j] = max(dp[i+1][j], dp[i][j+1]) # if doesnot match, go from right or from below
        return dp[0][0]            
-------------------------------------------------------------------------------------------

Problem - 309
# You are given an array prices where prices[i] is the price of a given stock on the ith day.
# Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:
# After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
# Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

# Example 1:
# Input: prices = [1,2,3,0,2]
# Output: 3
# Explanation: transactions = [buy, sell, cooldown, buy, sell]

# Example 2:
# Input: prices = [1]
# Output: 0
 
# Caching
# state : buying or selling?
# if buying : i+1
# if selling: i+2 , 1 more stage for cooldown
# Complexity: O(n*2)--> O(n), n = height of the decision tree = len(prices)

from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = {}  # hashmap,  key= (i, buying), val = max_profit
        
        def dfs(i, buying):
            if i >= len(prices):
                return 0
            if (i, buying) in dp:
                return dp[(i, buying)]
            
            cooldown = dfs(i+1, buying)
            if buying:
                buy = dfs(i+1, not buying) - prices[i]          # when buy or sell, not in buying state
                dp[(i, buying)] = max(buy, cooldown)
            else:         
                sell = dfs(i+2, not buying) + prices[i]        # 1 more stage for cooldown
                dp[(i, buying)]  = max(sell, cooldown)
            return dp[(i, buying)]
        return dfs(0, True) 
-------------------------------------------------------------------------------------

Problem - 518
# You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
# Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
# You may assume that you have an infinite number of each kind of coin.
# The answer is guaranteed to fit into a signed 32-bit integer.

# Example 1:
# Input: amount = 5, coins = [1,2,5]
# Output: 4
# Explanation: there are four ways to make up the amount:
# 5=5
# 5=2+2+1
# 5=2+1+1+1
# 5=1+1+1+1+1

# Example 2:
# Input: amount = 3, coins = [2]
# Output: 0
# Explanation: the amount of 3 cannot be made up just with coins of 2.

# Example 3:
# Input: amount = 10, coins = [10]
# Output: 1

# unbounded Knapsack
# bottom up DP


# caching/ memoization
# Complexity: time O(n * m), space O(m*n)  m = total number of coins, n= total amount
from typing import List

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        cache = {}
        
        def dfs(i, a):
            if i == len(coins):
                return 0
            if a == amount:
                return 1
            if a > amount:
                return 0
            cache[(i,a)] = dfs(i, a+coins[i]) +dfs(i+1, a)  # not skipping coin at i +skipping coin at i
            return cache[(i,a)]
        return dfs(0, 0)

        
# 2D dynamic programming
# Complexity: time O(n*m), space O(m*n)
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [[0]*(len(coins)+1) for i in range(amount+1)]
        dp[0] = [1]*(len(coins)+1)
            
        for a in range(amount+1):
            for i in range(len(coins)-1, -1, -1):
                dp[a][i] = dp[a][i+1]  # skipping coin at i
                if a-coins[i]>=0:
                    dp[a][i] += dp[a-coins[i]][i]    # not skipping coin at i
        return dp[amount][0]            

            
            
 # Complexity: time O(m*n), space O(n), 1 dimension of memory
# at any different time, we will only have two rows in memory
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0]* (amount+1)
        dp[0] = 1
        
        for i in range(len(coins)-1, -1, -1):
            nextDP = [0]* (amount+1)
            nextDP[0] = 1
            for a in range(amount+1):
                nextDP[a] = dp[a]
                if a-coins[i]>=0:
                    nextDP[a] += nextDP[a-coins[i]]
            dp = nextDP        
        return dp[amount]     
----------------------------------------------------------------------------------------

Problem - 494
# You are given an integer array nums and an integer target.
# You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
# For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
# Return the number of different expressions that you can build, which evaluates to target.

# Example 1:
# Input: nums = [1,1,1,1,1], target = 3
# Output: 5
# Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
# -1 + 1 + 1 + 1 + 1 = 3
# +1 - 1 + 1 + 1 + 1 = 3
# +1 + 1 - 1 + 1 + 1 = 3
# +1 + 1 + 1 - 1 + 1 = 3
# +1 + 1 + 1 + 1 - 1 = 3

# Example 2:
# Input: nums = [1], target = 1
# Output: 1

# Caching
# Complexity: O(n*t), n = total index, t= sum(nums) 

from typing import List

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        dp ={}  # (index, total) -> number of ways to sumup to target value
        
        def backtrack(i, total):    # index, current total
            if i == len(nums):
                return 1 if total == target else 0
            if (i, total) in dp:
                return dp[(i, total)]
            
            dp[(i, total)] = (backtrack(i+1, total + nums[i]) 
                              + backtrack(i+1, total - nums[i]))
            
            return dp[(i, total)]
        return backtrack(0,0)
--------------------------------------------------------------------------------------

Problem - 97
# Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

# An interleaving of two strings s and t is a configuration where s and t are divided into n and m non-empty substrings respectively, such that:
# s = s1 + s2 + ... + sn
# t = t1 + t2 + ... + tm
# |n - m| <= 1
# The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
# Note: a + b is the concatenation of strings a and b.

# Example 1:
# Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
# Output: true
# Explanation: One way to obtain s3 is:
# Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
# Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
# Since s3 can be obtained by interleaving s1 and s2, we return true.

# Example 2:
# Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
# Output: false
# Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.

# Example 3:
# Input: s1 = "", s2 = "", s3 = ""
# Output: true


# caching/memoization
# Complexity: O(m*n), m=len(s1), n=len(s2))

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        dp = {}    
        if len(s1)+len(s2) != len(s3):
            return False
        
        # k = i+j
        def dfs(i, j):
            if i == len(s1) and j == len(s2):
                return True
            if (i, j) in dp:
                return dp[(i,j)]
            
            if i< len(s1) and s1[i] == s3[i+j] and dfs(i+1, j):
                return True
            if j< len(s2) and s2[j] == s3[i+j] and dfs(i, j+1):
                return True
            dp[(i,j)] = False
            return False
        return dfs(0,0)
        
# # 2D dynamic programming    
# Complexity: O(m*n), m=len(s1), n=len(s2))   
class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        if len(s1)+len(s2) != len(s3):
            return False
        
        dp = [[False]* (len(s2)+1) for i in range(len(s1)+1)]
        dp[len(s1)][len(s2)] = True
        
        for i in range(len(s1),-1,-1):
            for j in range(len(s2),-1,-1):
                if i< len(s1) and s1[i] == s3[i+j] and dp[i+1][j]:
                    dp[i][j] = True
                if j< len(s2) and s2[j] == s3[i+j] and dp[i][j+1]:
                    dp[i][j] = True
        return dp[0][0]
--------------------------------------------------------------------------------------------

Problem - 329
# Given an m x n integers matrix, return the length of the longest increasing path in matrix.
# From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

# Example 1:
# Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
# Output: 4
# Explanation: The longest increasing path is [1, 2, 6, 9].

# Example 2:
# Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
# Output: 4
# Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

# Example 3:
# Input: matrix = [[1]]
# Output: 1

# Complexity: time O(m*n), space O(m*n)

from typing import List

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        dp = {} # (r,c) -> LIP (longest increasing path)
        ROWS, COLS = len(matrix), len(matrix[0])
        
        def dfs(r,c, prevVal):
            if (r<0 or r==ROWS or
               c<0 or c==COLS or
               matrix[r][c] <= prevVal):
                return 0
            if (r,c) in dp:
                return dp[(r,c)]
            
            res = 1
            res = max(res, 1+dfs(r+1, c, matrix[r][c]))
            res = max(res, 1+dfs(r-1, c, matrix[r][c]))
            res = max(res, 1+dfs(r, c+1, matrix[r][c]))
            res = max(res, 1+dfs(r, c-1, matrix[r][c]))
            dp[(r, c)] = res
            return res
        
        for i in range(ROWS):
            for j in range(COLS):
                dfs(i, j, -1)        # -1 not to satisfy matrix[r][c] <= prevVal    
                
        return max(dp.values())        
---------------------------------------------------------------------------------------

Problem - 115
# Given two strings s and t, return the number of distinct subsequences of s which equals t.
# A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).
# The test cases are generated so that the answer fits on a 32-bit signed integer.

# Example 1:
# Input: s = "rabbbit", t = "rabbit"
# Output: 3
# Explanation:
# As shown below, there are 3 ways you can generate "rabbit" from s.
# rabbbit
# rabbbit
# rabbbit

# Example 2:
# Input: s = "babgbag", t = "bag"
# Output: 5
# Explanation:
# As shown below, there are 5 ways you can generate "bag" from s.
# babgbag
# babgbag
# babgbag
# babgbag
# babgbag


# Complexity: time O(m*n), space O(m*n), m= len(s), n=len(t)

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        cache = {}
        
        def dfs(i,j):
            if j == len(t):
                return 1
            if i == len(s):
                return 0
            if (i,j) in cache:
                return cache[(i,j)]
            
            if s[i]==t[j]:
                cache[(i,j)] = dfs(i+1, j+1) + dfs(i+1, j) # match, check both cases
            else:    
                cache[(i,j)] = dfs(i+1, j)        # didnot macth, so increase in s only
            return cache[(i,j)]  
        return dfs(0,0)
-------------------------------------------------------------------------------------

Problem - 72
# Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
# You have the following three operations permitted on a word:
# Insert a character
# Delete a character
# Replace a character

# Example 1:
# Input: word1 = "horse", word2 = "ros"
# Output: 3
# Explanation: 
# horse -> rorse (replace 'h' with 'r')
# rorse -> rose (remove 'r')
# rose -> ros (remove 'e')

# Example 2:
# Input: word1 = "intention", word2 = "execution"
# Output: 5
# Explanation: 
# intention -> inention (remove 't')
# inention -> enention (replace 'i' with 'e')
# enention -> exention (replace 'n' with 'x')
# exention -> exection (replace 'n' with 'c')
# exection -> execution (insert 'u')
 
# bottom up DP
# Complexity: time O(  ), space O(  )

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        cache = [[float("inf")]*(len(word2)+1) for i in range(len(word1)+1)]
        
        # initial value in the extra row and extra column
        for i in range(len(word1)+1):
            cache[i][len(word2)] = len(word1)-i
        for j in range(len(word2)+1):
            cache[len(word1)][j] = len(word2)-j 
            
        for i in range(len(word1)-1,-1,-1):
            for j in range(len(word2)-1,-1,-1):
                if word1[i]==word2[j]:
                    cache[i][j] = cache[i+1][j+1]
                else:
                    cache[i][j] = 1 + min(cache[i+1][j], cache[i][j+1], cache[i+1][j+1])
        return cache[0][0] 
------------------------------------------------------------------------------------

Problem - 312
# You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
# If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
# Return the maximum coins you can collect by bursting the balloons wisely.

# Example 1:
# Input: nums = [3,1,5,8]
# Output: 167
# Explanation:
# nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
# coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

# Example 2:
# Input: nums = [1,5]
# Output: 10

# Idea: what happens if we pop 3 last?
# [3,1,5,8]--> 1[3,1,5,8]1--? 1[3,_, _, _]1--> 1*3*1
# nums[L-1].3.nums[R+1] + DP[L+1][R]
# what happens if we pop 5 last?
# [3,1,5,8]--> 1[3,1,5,8]1--? 1[_,1,_, _]1--> 1*1*1
# nums[L-1].1.nums[R+1] + DP[i+1][R] + DP[L]{i-1}

# neetcode solution, time limit exceeded
# Complexity: time O(n^3) (n^2 is total subarrays and iterating through every single value->n), space O(n^2)
from typing import List

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        nums = [1] + nums + [1]
        dp = {}
        
        
        def dfs(l,r):      # left and right boundaries of indices of the input array # O(n*n)
            if l>r:
                return 0
            if (l,r) in dp:
                return dp[(l,r)]
            dp[(l,r)] = 0
            for i in range(l, r+1):
                coins = nums[l-1]*nums[i]*nums[r+1]
                coins += dfs(l, i-1)+dfs(i+1,r)
                dp[(l,r)] = max(coins, dp[(l,r)])
            return dp[(l,r)]
        return dfs(1, len(nums)-2)   # exclude 1 from both side
            
        
# solution from disscussion, accepted and success! performance not impressive         
class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        nums = [1] + nums + [1]
        size = len(nums)        
        
        t = [[-1 for j in range(0,size+1)]
            for i in range(0,size+1)]
        
        def solve(l,r):
            if l >= r:
                return 0
            if t[l][r] > 0:
                return t[l][r]

            res = float('-inf')
            for k in range(l,r):
                if t[l][k] != -1:
                    left = t[l][k]
                else:
                    left = solve(l,k)
                    t[l][k] = left

                if t[k+1][r] != -1:
                    right = t[k+1][r]
                else:
                    right = solve(k+1,r)
                    t[k+1][r] = right

                temp = left + right + (nums[l-1]*nums[k]*nums[r])
                res = max(res,temp)
            t[l][r] = res
            return t[l][r]
        return solve(1,size-1)
---------------------------------------------------------------------------------------

Problem - 10
# Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
# '.' Matches any single character.​​​​
# '*' Matches zero or more of the preceding element.
# The matching should cover the entire input string (not partial).

# Example 1:
# Input: s = "aa", p = "a"
# Output: false
# Explanation: "a" does not match the entire string "aa".

# Example 2:
# Input: s = "aa", p = "a*"
# Output: true
# Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".

# Example 3:
# Input: s = "ab", p = ".*"
# Output: true
# Explanation: ".*" means "zero or more (*) of any character (.)".

# top down Memoization
# Complexity: O(n*m) , n=len(string), m =len(patterns)
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        cache = {}
        
        def dfs(i,j):
            if (i,j) in cache:
                return cache[(i,j)]
            if i>=len(s) and j>=len(p):
                return True
            if j>=len(p):
                return False
            
            match = i<len(s) and (s[i]==p[j] or p[j]==".")
            if (j+1)<len(p) and p[j+1]=="*":
                cache[(i,j)] = (dfs(i,j+2) or             # dont use *
                               (match and dfs(i+1, j)))   # use *
                return cache[(i,j)]
            if match:
                cache[(i,j)] = dfs(i+1, j+1)
                return cache[(i,j)]                
            cache[(i, j)] = False
            return False                    
        return dfs(0,0)    
-----------------------------------------------------------------------------------        
        

