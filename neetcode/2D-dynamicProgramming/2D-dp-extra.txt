					 2D DYNAMIC PROGRAMMING - EXTRA PROBLEMS


PROBLEM -63   Unique Paths II
# You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
# An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
# Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
# The testcases are generated so that the answer will be less than or equal to 2 * 109.

# Example 1:
# Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
# Output: 2
# Explanation: There is one obstacle in the middle of the 3x3 grid above.
# There are two ways to reach the bottom-right corner:
# 1. Right -> Right -> Down -> Down
# 2. Down -> Down -> Right -> Right

# Example 2:
# Input: obstacleGrid = [[0,1],[0,0]]
# Output: 1
 
# Time : O(m*n)
# Space : O(n)

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m , n = len(obstacleGrid), len(obstacleGrid[0])
        if obstacleGrid[m-1][n-1] == 1:
            return 0
        for r in range(m):
            for c in range(n):
                if obstacleGrid[r][c]==1:
                    obstacleGrid[r][c]="*"      
        
        row = [1]*n
        for c in range(n-2, -1, -1):
            if obstacleGrid[m-1][c] == "*":
                row[c] = 0
            else:
                row[c] = row[c+1]
                
        for r in range(m-2, -1,-1):
            newrow = [1]*n
            if obstacleGrid[r][n-1] == "*":
                newrow[n-1] = 0
            else:
                newrow[n-1] = row[n-1]

            for c in range(n-2, -1, -1):
                if obstacleGrid[r][c] == "*":
                    newrow[c] = 0
                else:    
                    newrow[c] = newrow[c+1]+row[c]                      
            row = newrow

        return row[0]    

-------------------------------------------------------------------------------------------

PROBLEM - 516 Longest Palindromic Subsequence

# Given a string s, find the longest palindromic subsequence's length in s.
# A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

# Example 1:
# Input: s = "bbbab"
# Output: 4
# Explanation: One possible longest palindromic subsequence is "bbbb".

# Example 2:
# Input: s = "cbbd"
# Output: 2
# Explanation: One possible longest palindromic subsequence is "bb".
 

class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        return self.longestCommonSubsequence(s, s[::-1])

    def longestCommonSubsequence(self, s1, s2):
        m, n = len(s1), len(s2)
        row = [0]*(n+1) 

        for i in range(m-1,-1,-1):
            currow = [0]*(n+1)
            for j in range(n-1, -1, -1):
                if s1[i]==s2[j]:
                    currow[j] = 1 + row[j+1]
                else:
                    currow[j] = max(currow[j+1], row[j])
            row = currow
        return currow[0]  
-------------------------------------------------------------------------------------------

PROBLEM -1049   Last Stone Weight II

# You are given an array of integers stones where stones[i] is the weight of the ith stone.
# We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:
# If x == y, both stones are destroyed, and
# If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
# At the end of the game, there is at most one stone left.
# Return the smallest possible weight of the left stone. If there are no stones left, return 0.

# Example 1:
# Input: stones = [2,7,4,1,8,1]
# Output: 1
# Explanation:
# We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
# we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
# we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
# we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.

# Example 2:
# Input: stones = [31,26,33,21,40]
# Output: 5
 
# Time: O(n*sum(total)) , for dp[(i,total)], i->n, total->sum(total)
# Space: O(n*sum(total))
class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        stoneTotal = sum(stones)
        target = ceil(stoneTotal/2)
        dp = {}

        def dfs(i, total):
            if total>=target or i==len(stones):
                return abs(total-(stoneTotal-total))

            if (i, total) in dp:
                return dp[(i, total)]    

            dp[(i, total)] = min(dfs(i+1, total), dfs(i+1, total+stones[i])) 

            return dp[(i,total)]   
        
        return dfs(0,0)
-------------------------------------------------------------------------------------------

PROBLEM - 877 Stone Game

# Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].
# The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.
# Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.
# Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.

# Example 1:
# Input: piles = [5,3,4,5]
# Output: true
# Explanation: 
# Alice starts first, and can only take the first 5 or the last 5.
# Say she takes the first 5, so that the row becomes [3, 4, 5].
# If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.
# If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.
# This demonstrated that taking the first 5 was a winning move for Alice, so we return true.

# Example 2:
# Input: piles = [3,7,2,3]
# Output: true

class Solution:
    def stoneGame(self, piles: List[int]) -> bool:
        dp = {}

        def dfs(l,r):
            if l>r:
                return 0
            if (l,r) in dp:
                return dp[(l,r)]

            even = True if (r-l)%2 else False
            left = piles[l] if even else 0
            right = piles[r] if even else 0

            dp[(l,r)] = max(dfs(l+1,r)+left, dfs(l, r-1)+right)        
            return dp[(l,r)]

        return dfs(0, len(piles)-1)>sum(piles)//2    
-------------------------------------------------------------------------------------------

PROBLEM -64 Minimum Path Sum

# Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
# Note: You can only move either down or right at any point in time.

# Example 1:
# Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
# Output: 7
# Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

# Example 2:
# Input: grid = [[1,2,3],[4,5,6]]
# Output: 12

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        for r in range(1, m):
            grid[r][0] = grid[r][0] + grid[r-1][0]

        for c in range(1, n):
            grid[0][c] = grid[0][c] + grid[0][c-1]

        for i in range(1, m):
            for j in range(1, n):
                grid[i][j] += min(grid[i-1][j], grid[i][j-1])

        return grid[m-1][n-1]

-------------------------------------------------------------------------------------------

PROBLEM - 221 Maximal Square

# Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

# Example 1:
# Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
# Output: 4

# Example 2:
# Input: matrix = [["0","1"],["1","0"]]
# Output: 1

# Example 3:
# Input: matrix = [["0"]]
# Output: 0

# Time : O(m*n)
# Space : O(m*n)
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0]*n for i in range(m)]
        maxsize = 0

        for r in range(m):
            for c in range(n):
                if matrix[r][c] == "1":
                    if r == 0 or c == 0:
                        dp[r][c] = 1
                    else:
                        dp[r][c] = 1 + min(dp[r][c-1], dp[r-1]
                                           [c-1], dp[r-1][c])
                    maxsize = max(maxsize, dp[r][c])
        return maxsize*maxsize

-------------------------------------------------------------------------------------------

PROBLEM - 474 Ones and Zeroes

# You are given an array of binary strings strs and two integers m and n.
# Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
# A set x is a subset of a set y if all elements of x are also elements of y.

# Example 1:
# Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
# Output: 4
# Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
# Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
# {"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.

# Example 2:
# Input: strs = ["10","0","1"], m = 1, n = 1
# Output: 2
# Explanation: The largest subset is {"0", "1"}, so the answer is 2.

class Solution:
    def findMaxForm(self, strs: List[str], M: int, N: int) -> int:
        dp = defaultdict(int)
        
        for s in strs:
            mCnt, nCnt = s.count("0"), s.count("1")

            for m in range(M, mCnt-1, -1 ):
                for n in range(N, nCnt-1, -1):
                    dp[(m,n)] = max(dp[(m,n)], 1+dp[m-mCnt, n-nCnt])                     

        return dp[(M, N)] 
-------------------------------------------------------------------------------------------

PROBLEM -1911 Maximum Alternating Subsequence Sum

# The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.
# For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
# Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).
# A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
 
# Example 1:
# Input: nums = [4,2,5,3]
# Output: 7
# Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.

# Example 2:
# Input: nums = [5,6,7,8]
# Output: 8
# Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.

# Example 3:
# Input: nums = [6,2,1,2,4,5]
# Output: 10
# Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.


# # Time: O(n), Space: O(n)
# # memoization
class Solution:
    def maxAlternatingSum(self, nums: List[int]) -> int:
        dp = {}

        def dfs(i, plus):
            if i==len(nums):
                return 0

            if (i, plus) in dp:
                return dp[(i,plus)]

            newtotal =  nums[i] if plus else -1*nums[i]
            dp[(i,plus)] = max( dfs(i+1, plus),dfs(i+1,not plus)+ newtotal)
            return dp[(i,plus)]

        return dfs(0, True)    


# # Time: O(n), Space: O(1)
class Solution:
    def maxAlternatingSum(self, nums: List[int]) -> int:
        sumEven, sumOdd = 0, 0  # first value in the subsequence was added, was subtracted respectively...

        for i in range(len(nums)-1, -1, -1):
            tmpEven = max(sumOdd+nums[i], sumEven)  #skip or not, sumOdd where if the 1st value was subtracted
            tmpOdd = max(sumEven-nums[i], sumOdd) #skip or not, sumEven where if the 1st value was added
            sumEven, sumOdd = tmpEven, tmpOdd   # sumEven, sumOdd always prev values, updated
        return sumEven    # because first value is even is needed
-------------------------------------------------------------------------------------------

PROBLEM - 1140 Stone Game II

# Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 
# Alice and Bob take turns, with Alice starting first.  Initially, M = 1.
# On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).
# The game continues until all the stones have been taken.
# Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

# Example 1:
# Input: piles = [2,7,9,4,4]
# Output: 10
# Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 

# Example 2:
# Input: piles = [1,2,3,4,5,100]
# Output: 104
 
# Time : O(2*n*n*n), (alice->2, i->n, M->n, nested for loop->n ) 
# Space : O(2*n*n), (alice->2, i->n, M->n)
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        cache = {}
        def dfs(alice, i, M):
            if i==len(piles):
                return 0
            if (alice, i , M) in cache:
                return cache[(alice, i, M)]    

            res = 0 if alice else float("inf")
            total = 0
            for X in range(1, 2*M+1):
                if i+X-1==len(piles):
                    break
                total += piles[i+X-1]  
                if alice:
                    res = max(res, total+dfs(not alice, i+X , max(X,M)))    
                else:
                    res = min(res, dfs(not alice, i+X, max(X,M)))  #Bob's turn but Alice's score, we want to minimize this
            cache[(alice, i, M)] = res          
            return cache[(alice, i, M)]   
        return dfs(True, 0 , 1)    
-------------------------------------------------------------------------------------------

PROBLEM -
