                     MATH AND GEOMETRY


Problem - 48
# You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
# You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

# Example 1:
# Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
# Output: [[7,4,1],[8,5,2],[9,6,3]]

# Example 2:
# Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
# Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 
# Complexity: time O(n*n), space O(1)
from typing import List

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        l, r =0, len(matrix)-1
        
        while l<r:
            for i in range(r-l):
                top, bottom = l, r    #think about numbers they represent

                # save the top-left
                topLeft = matrix[top][l+i]   #i go right

                # move bottom-left to top-left
                matrix[top][l+i] = matrix[bottom-i][l]  # i go up

                # move bottom-right to bottom-left
                matrix[bottom-i][l] = matrix[bottom][r-i]  # i go left

                # move top-right to bottom-right
                matrix[bottom][r-i] = matrix[top+i][r]    # i go down

                # move top-left to top-right
                matrix[top+i][r] = topLeft

            # next step, iterate inside loops
            l += 1    
            r -= 1 
----------------------------------------------------------------------------

Problem - 54
# Given an m x n matrix, return all elements of the matrix in spiral order.

# Example 1:
# Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
# Output: [1,2,3,6,9,8,7,4,5]

# Example 2:
# Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
# Output: [1,2,3,4,8,12,11,10,9,5,6,7]

# four pointers
# Complexity: time O(m*n), space O(1)
from typing import List

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        left, right = 0, len(matrix[0])
        top, bottom = 0, len(matrix)
        
        while left<right and top<bottom:
            # get every i in the top row
            for i in range(left, right):
                res.append(matrix[top][i])
            top += 1
            
            # get every i in the right col
            for i in range(top, bottom):
                res.append(matrix[i][right-1])
            right -= 1
            
            if not (left<right and top<bottom):
                break
                
            # get every i in the bottom row
            for i in range(right-1, left-1, -1):
                res.append(matrix[bottom-1][i])
            bottom -= 1    
            
            # get every i in the left col
            for i in range(bottom-1, top-1, -1):
                res.append(matrix[i][left])
            left += 1
            
        return res    
----------------------------------------------------------------------------------

Problem - 773
# Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
# You must do it in place.

# Example 1:
# Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
# Output: [[1,0,1],[0,0,0],[1,0,1]]

# Example 2:
# Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
# Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

# Complexity: time O(m*n), space O(1)
from typing import List

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        ROWS, COLS = len(matrix), len(matrix[0])
        rowZero =False    # extra memory for first row if it's zero
        
        # determine which rows and cols need to be zero
        for r in range(ROWS):
            for c in range(COLS):
                if matrix[r][c]==0:
                    matrix[0][c] = 0                # change in only first row and column
                    if r>0:
                        matrix[r][0] = 0
                    else:
                        rowZero = True
        
        # zero out the most
        for r in range(1, ROWS):
            for c in range(1, COLS):
                if matrix[0][c]==0 or matrix[r][0]==0:
                    matrix[r][c] = 0
        
        # zero out first column if needed
        if matrix[0][0]==0:
            for r in range(ROWS):
                matrix[r][0] = 0
            
        # zero out first row if needed
        if rowZero == True:   
            for c in range(COLS):
                    matrix[0][c] = 0
 -------------------------------------------------------------------------------

 Problem - 202
 # Write an algorithm to determine if a number n is happy.
# A happy number is a number defined by the following process:
# Starting with any positive integer, replace the number by the sum of the squares of its digits.
# Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
# Those numbers for which this process ends in 1 are happy.
# Return true if n is a happy number, and false if not.

# Example 1:
# Input: n = 19
# Output: true
# Explanation:
# 12 + 92 = 82
# 82 + 22 = 68
# 62 + 82 = 100
# 12 + 02 + 02 = 1

# Example 2:
# Input: n = 2
# Output: false

# complexity: time O(  ), space O(n)
class Solution:
    def isHappy(self, n: int) -> bool:
        visit = set()
        
        while n not in visit:
            visit.add(n)
            n = self.sumOfSquares(n)
            
            if n == 1:
                return True
        return False
    
    def sumOfSquares(self, n:int) -> int:
        output = 0
        while n:
            digit = n % 10
            digit = digit ** 2
            output += digit
            n = n // 10       # integer division
        return output    
 ---------------------------------------------------------------------------------

 Problem - 66
 # You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
# Increment the large integer by one and return the resulting array of digits.

# Example 1:
# Input: digits = [1,2,3]
# Output: [1,2,4]
# Explanation: The array represents the integer 123.
# Incrementing by one gives 123 + 1 = 124.
# Thus, the result should be [1,2,4].

# Example 2:
# Input: digits = [4,3,2,1]
# Output: [4,3,2,2]
# Explanation: The array represents the integer 4321.
# Incrementing by one gives 4321 + 1 = 4322.
# Thus, the result should be [4,3,2,2].

# Example 3:
# Input: digits = [9]
# Output: [1,0]
# Explanation: The array represents the integer 9.
# Incrementing by one gives 9 + 1 = 10.
# Thus, the result should be [1,0].
 
# reverse, loop through, reverse and return
# Complexity: time O(n), space O(1)
from typing import List

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        digits = digits[::-1]
        one, i = 1, 0   # one = carry, i = index
        
        while one:
            if i<len(digits):
                if digits[i] == 9:
                    digits[i] = 0
                else:
                    digits[i] += 1
                    one = 0
                i += 1
            else:
                digits.append(1)
                one  = 0
        return digits[::-1]           
----------------------------------------------------------------------------------

Problem - 50
# mplement pow(x, n), which calculates x raised to the power n (i.e., xn).

# Example 1:
# Input: x = 2.00000, n = 10
# Output: 1024.00000

# Example 2:
# Input: x = 2.10000, n = 3
# Output: 9.26100

# Example 3:
# Input: x = 2.00000, n = -2
# Output: 0.25000
# Explanation: 2-2 = 1/22 = 1/4 = 0.25

# recursion, helper function
# Complexity: time O(logn base 2)

class Solution:
    def myPow(self, x: float, n: int) -> float:
        def helper(x, n):
            if x == 0: return 0
            if n == 0: return 1
            
            res = helper(x, n//2)
            res = res * res
            return x * res if n%2 else res
        
        res = helper(x, abs(n))
        return res if n>=0 else 1 / res 
------------------------------------------------------------------------------------

Problem - 43
# Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
# Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

# Example 1:
# Input: num1 = "2", num2 = "3"
# Output: "6"

# Example 2:
# Input: num1 = "123", num2 = "456"
# Output: "56088"

# Complexity: time O(m*n), space O(m+n), m=len(num1), n=len(num2)
class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        if "0" in [num1, num2]:
            return "0"
        
        res = [0]*(len(num1)+len(num2))
        num1, num2 = num1[::-1], num2[::-1]       
        
        for i1 in range(len(num1)):
            for i2 in range(len(num2)):
                digit = int(num1[i1])*int(num2[i2])
                res[i1+i2] += digit
                res[i1+i2+1] += (res[i1+i2]//10)
                res[i1+i2] = res[i1+i2]%10
                
        res, beg = res[::-1], 0
        while beg<len(res) and res[beg] == 0:
            beg += 1
            
        res = map(str, res[beg:])
        return "".join(res) 
-------------------------------------------------------------------------------

Problem - 2013
# You are given a stream of points on the X-Y plane. Design an algorithm that:
# Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.
# Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.
# An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.

# Implement the DetectSquares class:
# DetectSquares() Initializes the object with an empty data structure.
# void add(int[] point) Adds a new point point = [x, y] to the data structure.
# int count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.
 
# Example 1:
# Input
# ["DetectSquares", "add", "add", "add", "count", "count", "add", "count"]
# [[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]
# Output
# [null, null, null, null, 1, 0, null, 2]

# Explanation
# DetectSquares detectSquares = new DetectSquares();
# detectSquares.add([3, 10]);
# detectSquares.add([11, 2]);
# detectSquares.add([3, 2]);
# detectSquares.count([11, 10]); // return 1. You can choose:
#                                //   - The first, second, and third points
# detectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.
# detectSquares.add([11, 2]);    // Adding duplicate points is allowed.
# detectSquares.count([11, 10]); // return 2. You can choose:
#                                //   - The first, second, and third points
#                                //   - The first, third, and fourth points
 

from collections import defaultdict
from typing import List

class DetectSquares:
    def __init__(self):
        self.pointsCount = defaultdict(int)    #hashmap
        self.pnts = []
        
    def add(self, point: List[int]) -> None:
        self.pointsCount[tuple(point)] += 1     #key in the map can't be list
        self.pnts.append(point)
        
    def count(self, point: List[int]) -> int:
        # Complexity: time O(n)
        res = 0
        px, py = point
        for x, y in self.pnts:
            if (abs(x-px) != abs(y-py)) or px == x or py == y:  #check if its a corner of square
                continue
            res += self.pointsCount[(x, py)] * self.pointsCount[(px,y)]    # if point don't exists, it would have value 0
        return res


# Your DetectSquares object will be instantiated and called as such:
# obj = DetectSquares()
# obj.add(point)
# param_2 = obj.count(point) 
-----------------------------------------------------------------------------------
            
        
 

