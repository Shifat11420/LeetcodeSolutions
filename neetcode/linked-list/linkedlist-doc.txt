                                    LINKED LISTS

Problem - 206
# Given the head of a singly linked list, reverse the list, and return the reversed list.

# Example 1:
# Input: head = [1,2,3,4,5]
# Output: [5,4,3,2,1]

# Example 2:
# Input: head = [1,2]
# Output: [2,1]

# Example 3:
# Input: head = []
# Output: []

from typing import Optional
# Definition for singly-linked list.

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


## two pointers
# Complexity: time O(n), memory O(1)
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev, curr = None, head

        while curr:
            temp = curr.next 
            curr.next = prev
            prev = curr
            curr = temp

        return prev    
-------------------------------------------------------------------------------------

Problem - 21
# https://leetcode.com/problems/merge-two-sorted-lists/
# You are given the heads of two sorted linked lists list1 and list2.
# Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
# Return the head of the merged linked list.

# Example 1:
# Input: list1 = [1,2,4], list2 = [1,3,4]
# Output: [1,1,2,3,4,4]

# Example 2:
# Input: list1 = [], list2 = []
# Output: []

# Example 3:
# Input: list1 = [], list2 = [0]
# Output: [0]

from typing import Optional
#Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy
        
        while list1 and list2:
            if list1.val<list2.val:
                tail.next = list1
                list1 = list1.next       #update
            else:
                tail.next = list2
                list2 = list2.next       #update
            tail = tail.next

        # for rest    
        if list1:
            tail.next = list1
        elif list2:
            tail.next = list2 
            
        return dummy.next               
------------------------------------------------------------------------------------

Problem - 143
# You are given the head of a singly linked-list. The list can be represented as:
# L0 → L1 → … → Ln - 1 → Ln
# Reorder the list to be on the following form:
# L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
# You may not modify the values in the list's nodes. Only nodes themselves may be changed.

# Example 1:
# Input: head = [1,2,3,4]
# Output: [1,4,2,3]

# Example 2:
# Input: head = [1,2,3,4,5]
# Output: [1,5,2,4,3]

# Complexity : time O(n), space O(1)
# Definition for singly-linked list.
from typing import Optional

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reorderList(self, head: Optional[ListNode]):
        # pointers for finding the half
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # Reverse the second half
        second = slow.next          # second half   
        slow.next = None    # break at half
        prev = None     

        while second:
            tmp = second.next
            second.next = prev
            prev = second             #update
            second = tmp              #update

        # prev is the last node
        # Merge two lists
        first, second = head, prev

        while second:
            tmp1, tmp2 = first.next, second.next          #break the link and save before breaking
            first.next = second          #link
            second.next = tmp1           #link
            first, second = tmp1, tmp2   #update
--------------------------------------------------------------------------------------------------

Problem - 19
# Given the head of a linked list, remove the nth node from the end of the list and return its head.

# Example 1:
# Input: head = [1,2,3,4,5], n = 2
# Output: [1,2,3,5]

# Example 2:
# Input: head = [1], n = 1
# Output: []

# Example 3:
# Input: head = [1,2], n = 1
# Output: [1]

#two pointers, complexity: O(n)
from typing import Optional

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        left = dummy
        
        right = head
        while n>0 and right:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        # delete
        left.next = left.next.next     
        
        return dummy.next   # we are nnot adding any node, just removing one.
------------------------------------------------------------------------------------------

Problem - 138
# A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

# Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

# For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

# Return the head of the copied linked list.

# The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

# val: an integer representing Node.val
# random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
# Your code will only be given the head of the original linked list.

 

# Example 1:


# Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
# Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
# Example 2:


# Input: head = [[1,1],[2,1]]
# Output: [[1,1],[2,1]]
# Example 3:



# Input: head = [[3,null],[3,0],[3,null]]
# Output: [[3,null],[3,0],[3,null]]


# Complexity: time O(n), each pass iterating through the entire linked list
#             space O(n), having to store every single node in the hash map

from typing import Optional

# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random


class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        oldTocopy = {None : None}  #hashmap and handle the null
        
        # 1st pass
        # cloning the linked list and adding to hash map
        curr = head
        while curr:
            copy =  Node(curr.val)
            oldTocopy[curr] = copy
            curr = curr.next
    
        # 2nd pass
        # set the pointers
        curr = head
        while curr:
            copy = oldTocopy[curr]
            copy.next = oldTocopy[curr.next]
            copy.random = oldTocopy[curr.random]
            curr = curr.next

        return oldTocopy[head]    
---------------------------------------------------------------------

Problem - 2
# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
# You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Example 1:
# Input: l1 = [2,4,3], l2 = [5,6,4]
# Output: [7,0,8]
# Explanation: 342 + 465 = 807.

# Example 2:
# Input: l1 = [0], l2 = [0]
# Output: [0]

# Example 3:
# Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
# Output: [8,9,9,9,0,0,0,1]


from ast import NodeVisitor
from typing import Optional
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        curr = dummy

        carry = 0
        while l1 or l2 or carry:
            v1 =l1.val if l1 else 0
            v2 =l2.val if l2 else 0

            #update digit
            val = v1+v2+carry
            carry= val //10
            val = val %10
            curr.next = ListNode(val)

            #update pointers
            curr = curr.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        return dummy.next     
----------------------------------------------------------------------

Problem -141
# Given head, the head of a linked list, determine if the linked list has a cycle in it.
# There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
# Return true if there is a cycle in the linked list. Otherwise, return false.

# Example 1:
# Input: head = [3,2,0,-4], pos = 1
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

# Example 2:
# Input: head = [1,2], pos = 0
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

# Example 3:
# Input: head = [1], pos = -1
# Output: false
# Explanation: There is no cycle in the linked list.
 
# Definition for singly-linked list.
from typing import Optional

# Complexity: time O(n), n length of the cycle, space O(1)
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        #Floyd's tortoise and hare, two pointers
        slow, fast = head, head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next 

            if slow == fast:
                return True
        return False         
------------------------------------------------------------------------------------------

Problem - 287
# Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
# There is only one repeated number in nums, return this repeated number.
# You must solve the problem without modifying the array nums and uses only constant extra space.

# Example 1:
# Input: nums = [1,3,4,2,2]
# Output: 2

# Example 2:
# Input: nums = [3,1,3,4,2]
# Output: 3

## linked list cycle problem
    #------> think each value is a pointer **
    #------> 0 is never in the cycles
## Floyd's algorithm---> to find brginning of a cycle (the point we will return)
    # ----> first find the first position they intersect at (slow and fast pointer)
    # ----> find second intersection point (slow and another slow pointer) and return

## Complexity: time O(n), space O(1)
from typing import List
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0,0
        
        # first intersection point
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        
        # second intersection point
        slow2 = 0
        while True:
            slow = nums[slow]
            slow2 = nums[slow2]
            if slow == slow2:
                return slow

nums = [1,3,4,2,2]
new = Solution
print(new().findDuplicate(nums))            
---------------------------------------------------------------------------------

Problem - 146
#https://leetcode.com/problems/lru-cache/
# Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
# Implement the LRUCache class:
# LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
# int get(int key) Return the value of the key if the key exists, otherwise return -1.
# void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
# The functions get and put must each run in O(1) average time complexity.

class Node:
    def __init__(self, key, val):
        self.key , self.val = key, val
        self.prev, self.next = None      #pointers for previous node and next node

class LRUCache:
    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {}    #hashmap, map key to node
        
        # left = LRU, right = most recent
        self.left, self.right = Node(0,0), Node(0,0)   #dummy pointers for least recently used(LRU), and most recently used 
        self.left.next, self.right.prev = self.right, self.left  #link the nodes, put a new node in the middle

    # remove node from list (linked list), helper function
    def remove(self, node):  
        prev, nxt = node.prev, node.nxt
        prev.next, nxt.prev = nxt, prev          # removing from the middle of the linked list

    # insert node at right of the node in the linked list, helper function
    def insert(self, node):        
        prev, nxt = self.right.prev, self.right
        prev.next = nxt.prev = node
        node.prev, node.next = prev, nxt

    def get(self, key: int) -> int:
        if key in self.cache:
            #TODO: update the most recent
            self.remove(self.cache[key])
            self.insert(self.cache[key])
            return self.cache[key].val
        return -1    
        
    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key, value)   #include in the hashmap and pointer to node    
        self.insert(self.cache[key])         # include in the right of the double linked list

        if len(self.cache)> self.cap:
            # remove from list and delete the LRU from the hash map
            lru = self.left.next     #least recently used from the linked list
            self.remove(lru)             # remove from list
            del self.cache[lru.key]      # remove from cache
        

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
---------------------------------------------------------------------------------------

Problem - 23
# https://leetcode.com/problems/merge-k-sorted-lists/
# You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

# Merge all the linked-lists into one sorted linked-list and return it.

# Example 1:
# Input: lists = [[1,4,5],[1,3,4],[2,6]]
# Output: [1,1,2,3,4,4,5,6]
# Explanation: The linked-lists are:
# [
#   1->4->5,
#   1->3->4,
#   2->6
# ]
# merging them into one sorted list:
# 1->1->2->3->4->4->5->6

# Example 2:
# Input: lists = []
# Output: []

# Example 3:
# Input: lists = [[]]
# Output: []

# Complexity: time O(n*logk)   --------everytime merging half of the previous no of lists
# Definition for singly-linked list.
from typing import List, Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists or len(lists)==0:
            return None
        
        while len(lists)>1:
            mergedlist = []
            for i in range(0, len(lists), 2):
                l1 = lists[i]
                l2 = lists[i+1] if (i+1)<len(lists) else None
                
                mergedlist.append(self.mergelists(l1,l2))
            lists = mergedlist
            
        return lists[0] 
    
    def mergelists(self, l1, l2):        
        dummy = ListNode()
        tail = dummy
        
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next
            
        if l1:
            tail.next = l1
        elif l2:
            tail.next = l2
                
        return dummy.next     
-------------------------------------------------------------------------------------------

Problem - 25
# Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
# k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
# You may not alter the values in the list's nodes, only nodes themselves may be changed.

# Example 1:
# Input: head = [1,2,3,4,5], k = 2
# Output: [2,1,4,3,5]

# Example 2:
# Input: head = [1,2,3,4,5], k = 3
# Output: [3,2,1,4,5]


# Definition for singly-linked list.
from typing import Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        ## dummy node because we eventually modify the head of the list
        ## save 1 node right before our group for 1->2->3 to 1->3->2, 1 is node part of the group
        dummy = ListNode(0, head)
        groupPrev = dummy

        while True:
            kth = self.getKth(groupPrev, k)
            # for last group in the list
            if not kth:
                break
            groupNext = kth.next

            # reverse thr group
            prev, curr = kth.next, groupPrev.next
            while curr!= groupNext:
                tmp = curr.next    
                curr.next = prev
                prev = curr
                curr = tmp

            # last step to fix the end points after reversing (like kth becomes the first element)
            tmp = groupPrev.next   # old first node
            groupPrev.next = kth   # new first node
            groupPrev = tmp        # new last node and node before for next group

        return dummy.next     #new head    


    # function to return kth node
    def getKth(self, curr, k):
        while curr and k>0:
            curr = curr.next 
            k -= 1
        return curr        

head = [1,2,3,4,5]
k = 3
new = Solution
print(new().reverseKGroup(head,k))
---------------------------------------------------------------------------------------------------------------------------


