                                               TRIE


Problem - 208
# A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

# Implement the Trie class:
# Trie() Initializes the trie object.
# void insert(String word) Inserts the string word into the trie.
# boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
# boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
 

# Example 1:
# Input
# ["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
# [[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
# Output
# [null, null, true, false, true, null, true]

# Explanation
# Trie trie = new Trie();
# trie.insert("apple");
# trie.search("apple");   // return True
# trie.search("app");     // return False
# trie.startsWith("app"); // return True
# trie.insert("app");
# trie.search("app");     // return True

# Complexity: time O(1)  #O(26)
class TrieNode():
    def __init__(self) -> None:
        self.children = {}
        self.endOfWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()        

    def insert(self, word: str) -> None:
        cur = self.root  #start at the root

        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c] 
        cur.endOfWord = True               

    def search(self, word: str) -> bool:
        cur = self.root    #start at the root
 
        for c in word:
            if c not in cur.children:
                return False
            cur = cur.children[c]
        return cur.endOfWord

    def startsWith(self, prefix: str) -> bool:
        cur = self.root    #start at the root

        for c in prefix:
            if c not in cur.children:
                return False
            cur = cur.children[c]    
        return True

        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
------------------------------------------------------------------------------------------------

Problem - 211
# Design a data structure that supports adding new words and finding if a string matches any previously added string.
# Implement the WordDictionary class:
# WordDictionary() Initializes the object.
# void addWord(word) Adds word to the data structure, it can be matched later.
# bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 
# Example:
# Input
# ["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
# [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
# Output
# [null,null,null,null,false,true,true,true]

# Explanation
# WordDictionary wordDictionary = new WordDictionary();
# wordDictionary.addWord("bad");
# wordDictionary.addWord("dad");
# wordDictionary.addWord("mad");
# wordDictionary.search("pad"); // return False
# wordDictionary.search("bad"); // return True
# wordDictionary.search(".ad"); // return True
# wordDictionary.search("b.."); // return True


class TrieNode():
    def __init__(self) -> None:
        self.children = {}   # hashmap a: TrieNode()
        self.word = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode()
        
    def addWord(self, word: str) -> None:
        cur = self.root

        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.word = True                

    # DFS, backtracking or recursion
    def search(self, word: str) -> bool:        
        def dfs(j, root):
            cur = root
            for i in range(j, len(word)):
                c = word[i]

                if c == ".":
                    for child in cur.children.values():
                        if dfs(i+1, child):
                            return True
                    return False        
                else:
                    if c not in cur.children:
                        return False
                    cur = cur.children[c]     
            return cur.word                   
        return dfs(0, self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
-----------------------------------------------------------------------------------------------------

Problem - 212
# Given an m x n board of characters and a list of strings words, return all words on the board.
# Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

# Example 1:
# Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
# Output: ["eat","oath"]

# Example 2:
# Input: board = [["a","b"],["c","d"]], words = ["abcb"]
# Output: []


from typing import List
class TrieNode:
    def __init__(self):
        self.children = {}    # hashmap ## character: childnode
        self.IsWord = False

    def addword(self, word):
        cur = self             # rootnode
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.IsWord = True            

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TrieNode()
        for w in words:
            root.addword(w)        # take each word and to the Trie

        ROWS, COLS = len(board), len(board[0]) 
        visited, res = set(), set()                # we dont wat to return duplicates for res and for visited, we don't want to stuck in infinite loop, dont want to visit same character twice
        
        def dfs(r, c, node, word):                 # word = what word so far, # r,c = coordinated, # node = currently what node from trie     
            if (r<0 or c<0 or r == ROWS or c == COLS or board[r][c] not in node.children or (r,c) in visited):
                return

            visited.add((r,c))
            node = node.children[board[r][c]]   # update node
            word += board[r][c]                 # update character
            if node.IsWord:
                res.add(word)                   # add the string

            dfs(r+1, c, root, word)
            dfs(r-1, c, root, word)
            dfs(r, c+1, root, word)
            dfs(r, c-1, root, word)
            visited.remove((r,c))    # since we are backtracking, we can visit the same one twice. But once we are no longer done visiting it after we return, then we can go ahead and revome this position from being visited

        for r in range(ROWS):
            for c in range(COLS):
                dfs(r,c, root, "")


        return list(res)     # res is a set, we need a list        
--------------------------------------------------------------------------------------------------------------------        