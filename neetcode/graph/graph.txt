                                     GRAPH


Problem - 200
# Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
# An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

# Example 1:
# Input: grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]
# Output: 1

# Example 2:
# Input: grid = [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]
# Output: 3

# BFS, iterative
import collections
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid :
            return
        
        rows, cols = len(grid), len(grid[0])
        visit = set()
        islands = 0        
        
        def bfs(r, c):
            q = collections.deque()      
            q.append((r,c))
            visit.add((r, c))
            
            while q:
                row, col = q.popleft() 
                directions = [[1,0], [-1,0], [0,1], [0,-1]]
            
                for dr, dc in directions:
                    r, c = row+dr, col+dc
                    if (r in range(rows) 
                        and c in range(cols)
                        and grid[r][c] == "1" 
                        and (r, c) not in visit):
                        q.append((r,c))
                        visit.add((r, c))
        
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == "1" and (r, c) not in visit:    
                    bfs(r,c)
                    islands += 1
        return islands        
    
# for DFS, iterative, just use q.pop() instead of popleft(), that way it would pop most recent element we added instead of the firstelement we added.
-------------------------------------------------------------------------------------------------------------------------------------------    


Problem - 133
# Given a reference of a node in a connected undirected graph.
# Return a deep copy (clone) of the graph.
# Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

# class Node {
#     public int val;
#     public List<Node> neighbors;
# }
 

# Test case format:
# For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.
# An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.
# The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

# Example 1:
# Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
# Output: [[2,4],[1,3],[2,4],[1,3]]
# Explanation: There are 4 nodes in the graph.
# 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
# 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
# 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
# 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

# Example 2:
# Input: adjList = [[]]
# Output: [[]]
# Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.

# Example 3:
# Input: adjList = []
# Output: []
# Explanation: This an empty graph, it does not have any nodes.

# Hashmap, DFS, recursive
# Complexity: time O(n)

# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        oldTonew = {}
        
        def dfs(node):
            if node in oldTonew:
                return oldTonew[node]
            copy = Node(node.val)
            oldTonew[node] = copy
            
            for nei in node.neighbors:
                copy.neighbors.append(dfs(nei))
            return copy    
                
        return dfs(node) if node else None     
----------------------------------------------------------------------------------------------------

Problem - 695
# You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
# The area of an island is the number of cells with a value 1 in the island.
# Return the maximum area of an island in grid. If there is no island, return 0.

# Example 1:
# Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
# Output: 6
# Explanation: The answer is not 11, because the island must be connected 4-directionally.

# Example 2:
# Input: grid = [[0,0,0,0,0,0,0,0]]
# Output: 0

# Complexity: time = O(size of the grid) = O(m*n), space = O(m*n) --worst case 
# DFS
from typing import List

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        ROW, COL = len(grid), len(grid[0])
        maxarea = 0
        visit = set()
        
        def dfs(r, c):
            if r<0 or r==ROW or c<0 or c==COL or grid[r][c] ==0 or (r,c) in visit:
                return 0
            
            visit.add((r,c))
            return (1 + dfs(r+1,c) + dfs(r-1,c) + dfs(r, c+1) + dfs(r, c-1))
        
        for r in range(ROW):
            for c in range(COL):
                area = dfs(r,c)
                maxarea = max(area, maxarea)
        return maxarea        
--------------------------------------------------------------------------------------------------

Problem - 417
# There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.
# The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).
# The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.
# Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

# Example 1:
# Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
# Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
# Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
# [0,4]: [0,4] -> Pacific Ocean 
#        [0,4] -> Atlantic Ocean
# [1,3]: [1,3] -> [0,3] -> Pacific Ocean 
#        [1,3] -> [1,4] -> Atlantic Ocean
# [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
#        [1,4] -> Atlantic Ocean
# [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
#        [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
# [3,0]: [3,0] -> Pacific Ocean 
#        [3,0] -> [4,0] -> Atlantic Ocean
# [3,1]: [3,1] -> [3,0] -> Pacific Ocean 
#        [3,1] -> [4,1] -> Atlantic Ocean
# [4,0]: [4,0] -> Pacific Ocean 
#        [4,0] -> Atlantic Ocean
# Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.

# Example 2:
# Input: heights = [[1]]
# Output: [[0,0]]
# Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.

#Idea: we will start from bordars and go inwards. So water flow direction will be considered like if height is heigher next water will flow. so heights[r][c]>prevHeight
# DFS
# Complexity: time O(n*m)
from typing import List

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        ROWS, COLS = len(heights), len(heights[0])
        pac, atl = set(), set()
        
        def dfs(r, c, visit, prevHeight):
            if (r<0 or r==ROWS or c<0 or c==COLS or heights[r][c]<prevHeight or (r,c) in visit):
                return
            visit.add((r,c))
            dfs(r+1, c, visit, heights[r][c]) 
            dfs(r-1, c, visit, heights[r][c])
            dfs(r, c+1, visit, heights[r][c])
            dfs(r, c-1, visit, heights[r][c])
        
        for c in range(COLS):
            dfs(0, c, pac, heights[0][c])     # previous height is none, so it's same height as this 
            dfs(ROWS-1, c, atl, heights[ROWS-1][c])
        for r in range(ROWS):
            dfs(r, 0, pac, heights[r][0])      # previous height is none, so it's same height as this 
            dfs(r, COLS-1, atl, heights[r][COLS-1])
            
        res = []    
        for r in range(ROWS):
            for c in range(COLS):
                if ((r,c) in atl) and ((r,c) in pac):
                    res.append([r,c])
        return res            
----------------------------------------------------------------------------------------

Problem - 130
# Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
# A region is captured by flipping all 'O's into 'X's in that surrounded region.

# Example 1:
# Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
# Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
# Explanation: Notice that an 'O' should not be flipped if:
# - It is on the border, or
# - It is adjacent to an 'O' that should not be flipped.
# The bottom 'O' is on the border, so it is not flipped.
# The other three 'O' form a surrounded region, so they are flipped.

# Example 2:
# Input: board = [["X"]]
# Output: [["X"]]

# Complexity: O(n*m)
from typing import List

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        ROWS, COLS = len(board), len(board[0])
        
        def dfs_capture(r, c):
            if (r<0 or r==ROWS or c<0 or c==COLS or board[r][c] != "O"):
                return
            board[r][c] = "T"
            dfs_capture(r+1, c)
            dfs_capture(r-1, c)
            dfs_capture(r, c+1)
            dfs_capture(r, c-1)
            
        # 1. (DFS) Capture unsurrounded regions (O -> T)
        for r in range(ROWS):
            for c in range(COLS):
                if board[r][c] == "O" and (r in [0, ROWS-1] or c in [0, COLS-1]):
                    dfs_capture(r, c)
        
        
        # 2. Capture surrounded regions (O -> X)
        for r in range(ROWS):
            for c in range(COLS):
                if board[r][c] == "O":
                    board[r][c] = "X"
        # 3. uncapture unsurrounded regions (T -> X)
        for r in range(ROWS):
            for c in range(COLS):
                if board[r][c] == "T":
                    board[r][c] = "O"
-------------------------------------------------------------------------------------------------------

Problem - 994
# You are given an m x n grid where each cell can have one of three values:
# 0 representing an empty cell,
# 1 representing a fresh orange, or
# 2 representing a rotten orange.
# Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
# Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

# Example 1:
# Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
# Output: 4

# Example 2:
# Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
# Output: -1
# Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

# Example 3:
# Input: grid = [[0,2]]
# Output: 0
# Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


# multisource BFS--- DFS does not work because it's working from multiple source
# keep track of how many oranges are initially, 
# BFS - count fresh oranges, include all the rotten oranges to queue, pop in each unit of time and make adjancent fresh oranges rot, if queue empty and there is still fresh oranges, that's fresh, impossible.  

# Complexity: O(n*m), n,m dimensions of the grid
from collections import deque
from typing import List

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        q = deque()
        time, fresh = 0, 0
        
        ROWS, COLS = len(grid), len(grid[0])
        for r in range(ROWS):
            for c in range(COLS):
                if grid[r][c] == 1:
                    fresh += 1
                if grid[r][c] == 2:
                    q.append([r, c])
                    
        directions = [[1,0], [-1,0], [0,1], [0,-1]]
        while q and fresh>0:
            for i in range(len(q)):   # multiple source, and a snap of q that be updated 
                r, c = q.popleft()
                for dr, dc in directions:
                    row, col = r+dr, c+dc
                    # if in bounds and fresh, make rotten
                    if (row<0 or row==ROWS or col<0 or col==COLS or grid[row][col] != 1):
                        continue
                    grid[row][col] = 2
                    q.append([row,col])        # update q with new rotten oranges
                    fresh -= 1
            time += 1
        return time if fresh == 0 else -1    
----------------------------------------------------------------------------------------

Problem - 286
 # problem description
 # file:///home/shifat/Pictures/Screenshot%20from%202022-02-17%2012-08-47.png
 
## Multi-source BFS
## linear time complexity --O(m*n)
 
import queue
from typing import List
class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        ROWS, COLS = len(rooms), len(rooms[0])
        q = queue()
        visited = set()
        
        def addRoom(r,c):
            if (r<0 or r==ROWS or c<0 or c==COLS or rooms[r][c]==-1 or (r,c) in visited):
                return
            visited((r,c))
            q.append([r,c])        
        
        for r in range(ROWS):
            for c in range(COLS):
                if rooms[r][c] == 0:         #start from the gates
                    visited.add((r,c))
                    q.append([r,c])
                    
        dist = 0
        while q:
            for i in range(len(q)):
                r,c = q.popleft()            
                rooms[r][c] = dist
                addRoom(r+1,c)
                addRoom(r-1,c)
                addRoom(r,c+1)
                addRoom(r,c-1)
            dist +=1
------------------------------------------------------------------------------------

Problem - 207
# There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
# For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
# Return true if you can finish all courses. Otherwise, return false.

# Example 1:
# Input: numCourses = 2, prerequisites = [[1,0]]
# Output: true
# Explanation: There are a total of 2 courses to take. 
# To take course 1 you should have finished course 0. So it is possible.

# Example 2:
# Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
# Output: false
# Explanation: There are a total of 2 courses to take. 
# To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


# DFS, hashmap
# Complexity: O(n+p)  n= numberof nodes, p = number of prerequisites  # we dont need to go through prerequisites twice (edges and vertices)
from typing import List

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # map each cource to prerequisites list
        preMap = {i:[] for i in range(numCourses)}
        for crs, pre in prerequisites:
            preMap[crs].append(pre)
            
        # visitSet= all courses along the current dfs path
        visitSet = set()
        def dfs(crs):
            if crs in visitSet: 
                return False
            if preMap[crs] == []:
                return True
            
            visitSet.add(crs)
            for pre in preMap[crs]:
                if not dfs(pre): return False
            visitSet.remove(crs)           #clean up, not will be visited again
            preMap[crs] = []               # clean up, dont have to repeat all the work
            return True
        
        for crs in range(numCourses):      # for separate set of course and prerequisites
            if not dfs(crs): return False
        return True    
------------------------------------------------------------------------------------------------

Problem - 210
# There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
# For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
# Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

# Example 1:
# Input: numCourses = 2, prerequisites = [[1,0]]
# Output: [0,1]
# Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

# Example 2:
# Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
# Output: [0,2,1,3]
# Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
# So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

# Example 3:
# Input: numCourses = 1, prerequisites = []
# Output: [0]

# Recursive DFS and Topological Sort (not uquique, no cycle) Solution |
# Complexity: O(v+e) Time | O(v+e) Space
# v -> The number of vertices in the graph | e -> The number of edges in the graph
## a course has three possible states:
## visited --> course has been added to output
## visiting --> crs not added to output, but added to cycle
## unvisited --> crs not added to output or cycle

from typing import List

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        #build adjancency list of prereqs
        prereq = {c: [] for c in range(numCourses)}
        for crs, pre in prerequisites:
            prereq[crs].append(pre)
                
        visit, cycle = set(), set()
        output= []
        
        def dfs(crs):
            if crs in cycle:
                return False
            if crs in visit:
                return True    #not stop algorithm, but crs is visited     
            
            cycle.add(crs)
            for pre in prereq[crs]:
                if dfs(pre) == False:  #cycle detected
                    return False

            cycle.remove(crs)          # no longer along the path we are going
            visit.add(crs)             
            output.append(crs)         # visited with prereqs, so add to output
            return True

        for c in range(numCourses):
            if dfs(c) == False:        #cycle detected
                return []
        return output  
-------------------------------------------------------------------------------------

Problem - 684
# In this problem, a tree is an undirected graph that is connected and has no cycles.
# You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
# Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

# Example 1:
# # Input: edges = [[1,2],[1,3],[2,3]]
# Output: [2,3]

# Example 2:
# Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
# Output: [1,4]

## Union-find algorithm
# Complexity: time O(n) 

from typing import List

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        par = [i for i in range(len(edges)+1)]      #parents
        rank = [1]*(len(edges)+1)
        
        #find parent
        def find(n):  
            p = par[n]
            while p!= par[p]:
                par[p] = par[par[p]]
                p = par[p]
            return p    
                
                
        def union(n1,n2):
            p1, p2 = find(n1), find(n2)
            if p1 == p2:
                return False
            
            if rank[p2]>rank[p1]:
                par[p1] = p2
                rank[p2] += rank[p1]
            else:
                par[p2] = p1
                rank[p1] += rank[p2]
            return True
        
        for n1, n2 in edges:
            if not union(n1,n2):
                return [n1,n2]
----------------------------------------------------------------------------------

Problem - 200
# Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
# An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

# Example 1:
# Input: grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]
# Output: 1

# Example 2:
# Input: grid = [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]
# Output: 3

# BFS, iterative
import collections
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid :
            return
        
        rows, cols = len(grid), len(grid[0])
        visit = set()
        islands = 0        
        
        def bfs(r, c):
            q = collections.deque()      
            q.append((r,c))
            visit.add((r, c))
            
            while q:
                row, col = q.popleft() 
                directions = [[1,0], [-1,0], [0,1], [0,-1]]
            
                for dr, dc in directions:
                    r, c = row+dr, col+dc
                    if (r in range(rows) 
                        and c in range(cols)
                        and grid[r][c] == "1" 
                        and (r, c) not in visit):
                        q.append((r,c))
                        visit.add((r, c))
        
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == "1" and (r, c) not in visit:    
                    bfs(r,c)
                    islands += 1
        return islands        
    
# for DFS, iterative, just use q.pop() instead of popleft(), that way it would pop most recent element we added instead of the firstelement we added.
-----------------------------------------------------------------------------------------------------------

Problem - 261
# Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

# Example 1:
# Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
# Output: true

# Example 2:
# Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
# Output: false

# valid tree- connected, no cycle/loop
# DFS, hashmap
# start at 0, check for every single node and their neighbors if they are connected
# maintain prev values to avoid false loop

# Complexity: time O(e+v), space O(e+v), e = number of edges, v = number of vertices 
def validTree(self, n, edges):
    if not n:
        return False               # empty tree is a valid tree

    adj = {i : [] for i in range(n)}       # node: [neighbors]
    for n1, n2 in edges:
        adj[n1].append(n2)
        adj[n2].append(n1)    

    visit = set()
    def dfs(i, prev):
        if i in visit:
            return False                 # loop detection

        visit.add(i)

        for j in adj[i]:
            if j == prev:
                continue
            if not dfs(j,i):
                return False             # loop detection
        return True

    return dfs(0, -1) and n==len(visit)            
-------------------------------------------------------------------------------------

Problem - 127
# A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
# Every adjacent pair of words differs by a single letter.
# Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
# sk == endWord
# Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

# Example 1:
# Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
# Output: 5
# Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

# Example 2:
# Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
# Output: 0
# Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

# BFS, adjacency list
# Complexity: n^2*m overall

# creating adjacency list with nested loop in the entire list:  n= number of words<=5000, m = length of each word<=10, n^2*m  -changed to--> m^2*n
# hot --> *ot or h*t or ho*  patterns, n*m*m  (going through every pattern = n, going through every single character we removed = m, add each word to the list = m)
# BFS : n^2*m (n^2, n= no of edges we potentially have and m for comparing the words)

import collections
from typing import List


class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0

        # build adjacency list
        nei = collections.defaultdict(list)  
        wordList.append(beginWord)
        for word in wordList:
            for j in range(len(word)):    
                pattern = word[:j]+"*"+word[j+1:]       # skipping jth character and putting *
                nei[pattern].append(word)

        # BFS
        visit = set([beginWord])
        q = collections.deque([beginWord])    
        res = 1

        while q:
            for i in range(len(q)):
                word = q.popleft()
                if word == endWord:
                    return res
                for j in range(len(word)):    
                    pattern = word[:j]+"*"+word[j+1:] 
                    for neiWord in nei[pattern]:
                        if neiWord not in visit:
                            visit.add(neiWord)
                            q.append(neiWord)
            res += 1
        return 0    


beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
new = Solution
print(new().ladderLength(beginWord, endWord, wordList))
------------------------------------------------------------------------------------
        



