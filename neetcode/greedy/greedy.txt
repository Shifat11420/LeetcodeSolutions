                                       Greedy


Probelm - 53
# Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
# A subarray is a contiguous part of an array.

# Example 1:
# Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
# Output: 6
# Explanation: [4,-1,2,1] has the largest sum = 6.

# Example 2:
# Input: nums = [1]
# Output: 1

# Example 3:
# Input: nums = [5,4,-1,7,8]
# Output: 23

# Idea: remove negative prefix, keep adding and if the sum is negative, ignore and reset
# Complexity: O(n)
from typing import List

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = nums[0]
        curSum = 0
        
        for n in nums:
            if curSum < 0:
                curSum = 0
            curSum += n    
            maxSum = max(maxSum, curSum)
        return maxSum        
----------------------------------------------------------------------------------------

Probelm - 55
# You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
# Return true if you can reach the last index, or false otherwise.

# Example 1:
# Input: nums = [2,3,1,1,4]
# Output: true
# Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

# Example 2:
# Input: nums = [3,2,1,0,4]
# Output: false
# Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 
# Greedy. Idea: work way backwards starting from the end
# Complexity: time O(n), space O(1 / )
from typing import List

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        goal = len(nums)-1
        
        for i in range(len(nums)-1, -1, -1):
            if i+nums[i] >= goal:
                goal = i          # shift goal right to left
        return True if goal == 0 else False        
        
-------------------------------------------------------------------------------------------

Probelm - 45
# You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
# Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
# 1 <= j <= nums[i] and
# i + j < n
# Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

# Example 1:
# Input: nums = [2,3,1,1,4]
# Output: 2
# Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

# Example 2:
# Input: nums = [2,3,0,1,4]
# Output: 2
 
 # Greedy, BFS
# Complexity: time O(n)
from typing import List

class Solution:
    def jump(self, nums: List[int]) -> int:
        res = 0
        l = r = 0   # window of each jump
        
        while r < len(nums)-1:
            farthest = 0
            for i in range(l,r+1):
                farthest = max(farthest, i+nums[i])     # heighest jump
            l = r+1
            r = farthest
            res += 1
        return res  
--------------------------------------------------------------------------

Probelm - 134
# There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
# You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.
# Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

# Example 1:
# Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
# Output: 3
# Explanation:
# Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
# Travel to station 4. Your tank = 4 - 1 + 5 = 8
# Travel to station 0. Your tank = 8 - 2 + 1 = 7
# Travel to station 1. Your tank = 7 - 3 + 2 = 6
# Travel to station 2. Your tank = 6 - 4 + 3 = 5
# Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
# Therefore, return 3 as the starting index.

# Example 2:
# Input: gas = [2,3,4], cost = [3,4,3]
# Output: -1
# Explanation:
# You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
# Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
# Travel to station 0. Your tank = 4 - 3 + 2 = 3
# Travel to station 1. Your tank = 3 - 3 + 3 = 3
# You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
# Therefore, you can't travel around the circuit once no matter where you start.

# Greedy
# the problem is basically is finding out that it's a Greedy problem
# complexity: time O(n), space O(1)

from typing import List

class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        if sum(gas)<sum(cost):
            return -1
        
        res = 0  # starting position
        total = 0 # current total of the diff between gas and cost
        
        for i in range(len(gas)):
            total += (gas[i]-cost[i])
            
            if total < 0:
                total = 0
                res = i+1   # once you find positive total you dont need to consider past negatives since sum(gas)>=sum{cost}
        return res         
--------------------------------------------------------------------------------

Probelm - 846
# Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.
# Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

# Example 1:
# Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
# Output: true
# Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]

# Example 2:
# Input: hand = [1,2,3,4,5], groupSize = 4
# Output: false
# Explanation: Alice's hand can not be rearranged into groups of 4.

# Greedy, hashmap (key: value, val: count), minHeap 
# Complexity: time (n*logn),  n times pop (logn) from minheap, n = size of input array 
import heapq
from typing import List

class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize:
            return False
        
        count = {}
        for n in hand:
            count[n] = 1+ count.get(n,0)
            
        minH = list(count.keys())      # create a minheap  
        heapq.heapify(minH)
        
        while minH:
            first = minH[0]
            for i in range(first, first+groupSize):
                if i not in count:
                    return False
                count[i] -= 1                
                if count[i]==0:
                    if i!= minH[0]:        # has to be minimum value, otherwise not consequetive, create a hole
                        return False
                    heapq.heappop(minH)
        return True            
------------------------------------------------------------------------------

Probelm - 1899
# A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.
# To obtain target, you may apply the following operation on triplets any number of times (possibly zero):
# Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].
# For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].
# Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.

# Example 1:
# Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]
# Output: true
# Explanation: Perform the following operations:
# - Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]
# The target triplet [2,7,5] is now an element of triplets.

# Example 2:
# Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]
# Output: false
# Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.

# Example 3:
# Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]
# Output: true
# Explanation: Perform the following operations:
# - Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
# - Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
# The target triplet [5,5,5] is now an element of triplets.

# Complexity: time O(n) , iterate through every triplet
from typing import List

class Solution:
    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:
        good = set()
        
        for t in triplets:
            if t[0]>target[0] or t[1]>target[1] or t[2]>target[2]:
                continue       # ignore these triplets
                
            for i, v in enumerate(t):
                if v == target[i]:
                    good.add(i)
                    
        return len(good)==3            
------------------------------------------------------------------------------------

Probelm - 763
# You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.
# Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
# Return a list of integers representing the size of these parts.

# Example 1:
# Input: s = "ababcbacadefegdehijhklij"
# Output: [9,7,8]
# Explanation:
# The partition is "ababcbaca", "defegde", "hijhklij".
# This is a partition so that each letter appears in at most one part.
# A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

# Example 2:
# Input: s = "eccbbbbdec"
# Output: [10]

# hashmap, key:char, val:lastindex
# Complexity: time O(n), space O(26)~O(1)

from typing import List

class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        lastIndex = {}     # char --> last index in s
        for i, c in enumerate(s):
            lastIndex[c] = i
            
        res = []    
        size, end = 0, 0    
        for i, c in enumerate(s):
            size += 1
            end = max(end, lastIndex[c])
            
            if i==end:
                res.append(size)
                size = 0
        return res         
---------------------------------------------------------------------------

Probelm - 678
# Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
# The following rules define a valid string:
# Any left parenthesis '(' must have a corresponding right parenthesis ')'.
# Any right parenthesis ')' must have a corresponding left parenthesis '('.
# Left parenthesis '(' must go before the corresponding right parenthesis ')'.
# '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 
# Example 1:
# Input: s = "()"
# Output: true

# Example 2:
# Input: s = "(*)"
# Output: true

# Example 3:
# Input: s = "(*))"
# Output: true

# Brute force 3^n, with memoization n^3
# DP, 2D memoization/caching (i, left) --> n^2 matrix, to calculate each value O(n)--> n^3
# left = number of left open parenthesis we have currently
# Greedy O(n), 
# leftMin, leftMax = no of min, max open left parenthesis
# Complexity: time O(n), space O(1)

class Solution:
    def checkValidString(self, s: str) -> bool:
        leftMin, leftMax = 0, 0
        
        for c in s:
            if c=="(":
                leftMin, leftMax = leftMin+1, leftMax+1
            elif c==")":
                leftMin, leftMax = leftMin-1, leftMax-1
            else:                      # wildcard
                leftMin, leftMax = leftMin-1, leftMax+1     #in case, we have ")" and * is chosen "("
            if leftMax < 0:
                return False
            if leftMin <0 :            # (*)( will return true otherwise
                leftMin = 0            # leftMax is still positive and it's valid
        return leftMin == 0
--------------------------------------------------------------------------------------        
        
         
