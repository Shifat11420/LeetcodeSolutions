                                HEAP or PRIORITY QUEUE


Problem - 703
# Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

# Implement KthLargest class:

# KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
# int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

# Example 1:

# Input
# ["KthLargest", "add", "add", "add", "add", "add"]
# [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
# Output
# [null, 4, 5, 5, 8, 8]

# Explanation
# KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
# kthLargest.add(3);   // return 4
# kthLargest.add(5);   // return 5
# kthLargest.add(10);  // return 5
# kthLargest.add(9);   // return 8
# kthLargest.add(4);   // return 8
 
# Use min heap because we will only add elements, and we are finding largest elements nd minimum of them
# min heap: add/pop------> logn, find min value------>O(1)
# Complexity : time O(nlogn) worst case
import heapq
from typing import List


class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        # minheap with k largest integers
        self.minheap, self.k = nums, k
        heapq.heapify(self.minheap)
        while len(self.minheap)> self.k:
            heapq.heappop(self.minheap)
        

    def add(self, val: int) -> int:
        heapq.heappush(self.minheap, val)
        if len(self.minheap)> self.k:
            heapq.heappop(self.minheap)
        return self.minheap[0]         # always minimum element


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
-------------------------------------------------------------------------------------------------

Problem - 1046
# You are given an array of integers stones where stones[i] is the weight of the ith stone.
# We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:
# If x == y, both stones are destroyed, and
# If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
# At the end of the game, there is at most one stone left.
# Return the weight of the last remaining stone. If there are no stones left, return 0.

 
# Example 1:
# Input: stones = [2,7,4,1,8,1]
# Output: 1
# Explanation: 
# We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
# we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
# we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
# we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.

# Example 2:
# Input: stones = [1]
# Output: 1

# python does not have maxheap, so one way is to make elements negative and do min heap
# Complexity: time O(nlogn)  - n times get max (logn) from heap  
import heapq
from typing import List


class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        stones = [-s for s in stones]
        heapq.heapify(stones)
        
        while len(stones)>1:
            first = heapq.heappop(stones)
            second = heapq.heappop(stones)
            
            if second > first:    #since it's min heap on negative values, we want max heap this way
                heapq.heappush(stones, (first-second))   # not absolute value since we have negative values in the heap
                
        stones.append(0)  # handling edge case if stones is empty         
        return abs(stones[0])
-------------------------------------------------------------------------------------------

Problem - 973
# Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
# The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
# You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

# Example 1:
# Input: points = [[1,3],[-2,2]], k = 1
# Output: [[-2,2]]
# Explanation:
# The distance between (1, 3) and the origin is sqrt(10).
# The distance between (-2, 2) and the origin is sqrt(8).
# Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
# We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

# Example 2:
# Input: points = [[3,3],[5,-1],[-2,4]], k = 2
# Output: [[3,3],[-2,4]]
# Explanation: The answer [[-2,4],[3,3]] would also be accepted.



# Complexity: time O(klogn)    # k times heappop, operation is log(heapsize) =logn, heap

import heapq
from typing import List

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        minheap = []       
        for x, y in points:
            dist = (x**2)+(y**2)
            minheap.append([dist, x, y])
            
        heapq.heapify(minheap)

        res = []
        while k>0:
            dist, x, y = heapq.heappop(minheap)
            res.append([x,y])
            k -= 1

        return res    
-----------------------------------------------------------------------------------------------

Problem - 273
# Given an integer array nums and an integer k, return the kth largest element in the array.
# Note that it is the kth largest element in the sorted order, not the kth distinct element.
# You must solve it in O(n) time complexity.

# Example 1:
# Input: nums = [3,2,1,5,6,4], k = 2
# Output: 5

# Example 2:
# Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
# Output: 4


# Quick select algorithm, similar to quick sort, make array in halves, left part <= pivot < right part
# change position into places, no extra memory

# Complexity: O(n) -average case... worst case is O(n^2)
# how can we make sure this is always going to be half, turns out we can, so worst case is n^2 and average case n.

# for normal quick sort, it;s O(nlogn)
# average case --- at best look at one half of the array,  n + n/2 +n/4 .... = O(2n) = O(n)
# worst case ---if the pivot is the greatest element, so you eleminate one element at a time, so complexity n^2


# l, r left and right pointers
from typing import List

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        k = len(nums) -k

        def quickselect(l, r):        # r is not inclusive
            pivot, p = nums[r], l     # pivot is the rightmost value, pointer p starts from the left
            for i in range(l,r):
                if nums[i] <= pivot:
                    nums[p], nums[i] =nums[i], nums[p]
                    p += 1
            nums[p], nums[r] = nums[r], nums[p]              # change pivot position 

            if p > k:   return quickselect(l, p-1)           # run on left half
            elif p < k: return quickselect(p+1, r)           # run on right half
            else:       return nums[p] 

        return quickselect(0, len(nums)-1)

nums = [3,2,3,1,2,4,5,5,6] 
k = 4
new = Solution
print(new().findKthLargest(nums, k))        
-------------------------------------------------------------------------------------

Problem - 621
# Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.
# However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.
# Return the least number of units of times that the CPU will take to finish all the given tasks.

# Example 1:
# Input: tasks = ["A","A","A","B","B","B"], n = 2
# Output: 8
# Explanation: 
# A -> B -> idle -> A -> B -> idle -> A -> B
# There is at least 2 units of time between any two same tasks.

# Example 2:
# Input: tasks = ["A","A","A","B","B","B"], n = 0
# Output: 6
# Explanation: On this case any permutation of size 6 would work since n = 0.
# ["A","A","A","B","B","B"]
# ["A","B","A","B","A","B"]
# ["B","B","B","A","A","A"]
# ...
# And so on.

# Example 3:
# Input: tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
# Output: 16
# Explanation: 
# One possible solution is
# A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A
 
# done using max heap, actually making all the values negative and doing min heap
# maxheap allows to find which ones are most frequent in O(log n) time, in this case it's O(log 26)=O(1) ##26 letters
# overall complexity O(n*m) for count the occurances of each task from input, and poping every value from max heap and adding to it
# that is,  time = O(n*m)  # n = size of tasks, m = idle time, for worst case you have to go through the idle time for each task you have, e.g. tasks are A,A,A,A...
# space = O(n)

from collections import Counter, deque
import heapq


def leastInterval(tasks, n):  
    # each task takes one unit of time
    # minimize the idle time
    
    count = Counter(tasks)      #hashmap task: frequency
    maxHeap = [-cnt for cnt in count.values()]
    heapq.heapify(maxHeap)
    
    q = deque()
    time = 0
    
    while maxHeap or q:
        time +=1
        if maxHeap:
            cnt = 1 + heapq.heappop(maxHeap)
            if cnt:
                q.append([cnt, time+n])
            
        if q and q[0][1]==time:
            heapq.heappush(maxHeap, q.popleft()[0])           
    return time        
 
       

tasks = ["A","A","A","B","B","B"]
n = 0

print(leastInterval(tasks, n))
#leastInterval(tasks, n)
--------------------------------------------------------------------------------

Problem - 355
# Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

# Implement the Twitter class:
# Twitter() Initializes your twitter object.
# void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
# List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
# void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
# void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
 
# Example 1:
# Input
# ["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
# [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
# Output
# [null, null, [5], null, null, [6, 5], null, [5]]

# Explanation
# Twitter twitter = new Twitter();
# twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
# twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
# twitter.follow(1, 2);    // User 1 follows user 2.
# twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
# twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
# twitter.unfollow(1, 2);  // User 1 unfollows user 2.
# twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.


# using defaultdict, don't need to initialize hashmaps or sets, saves few lines of code
# hashmap, hashset--- adds and removes in O(1)

from collections import defaultdict
import heapq
from typing import List


class Twitter:

    def __init__(self):
        self.count = 0
        self.tweetMap = defaultdict(list)  # hashmap--  list of [count, tweetID]
        self.followMap = defaultdict(set)  # hashset--  set of followeeID
        

    def postTweet(self, userId: int, tweetId: int) -> None:     # O(1)
        self.tweetMap[userId].append([self.count, tweetId])
        self.count -= 1   # since we are creating minheap

        
    def getNewsFeed(self, userId: int) -> List[int]:
        # Complexity: O(k) ~ O(k + 10.logk)  # k is the number of followee (k number of tweet lists) for the user, finding minimum logk (among last values from k lists), do it 10 times     
        # heap push k.logk, heapify O(k)
        res = []  # ordered starting from recent
        minHeap = []
        
        self.followMap[userId].add(userId)        # a user follows himself
        for followeeId in self.followMap[userId]:
            if followeeId in self.tweetMap:
                index = len(self.tweetMap[followeeId])-1
                count, tweetId = self.tweetMap[followeeId][index]
                minHeap.append([count, tweetId, followeeId, index-1])    #index-1 since we are going to go to back to list self.tweetMap[followeeId] and get the next position at the prev index, that is the next position we are going to look at in the list
        heapq.heapify(minHeap)
        
        while minHeap and len(res)<10:
            count, tweetId, followeeId, index = heapq.heappop(minHeap)
            res.append(tweetId)
            
            if index>=0:  # if there is more tweets more the same followee
                count, tweetId = self.tweetMap[followeeId][index]
                heapq.heappush(minHeap, [count, tweetId, followeeId, index-1])
        return res                

    def follow(self, followerId: int, followeeId: int) -> None:   # O(1)
        self.followMap[followerId].add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:   # O(1)
        if followeeId in self.followMap[followerId]:
            self.followMap[followerId].remove(followeeId)



# Your Twitter object will be instantiated and called as such:
# obj = Twitter()
# obj.postTweet(userId,tweetId)
# param_2 = obj.getNewsFeed(userId)
# obj.follow(followerId,followeeId)
# obj.unfollow(followerId,followeeId)
------------------------------------------------------------------------------------------------------

Problem - 295
# The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.
# For example, for arr = [2,3,4], the median is 3.
# For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.

# Implement the MedianFinder class:
# MedianFinder() initializes the MedianFinder object.
# void addNum(int num) adds the integer num from the data stream to the data structure.
# double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.

# Example 1:
# Input
# ["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
# [[], [1], [2], [], [3], []]
# Output
# [null, null, null, 1.5, null, 2.0]

# Explanation
# MedianFinder medianFinder = new MedianFinder();
# medianFinder.addNum(1);    // arr = [1]
# medianFinder.addNum(2);    // arr = [1, 2]
# medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
# medianFinder.addNum(3);    // arr[1, 2, 3]
# medianFinder.findMedian(); // return 2.0
 
import heapq

class MedianFinder:
    # two heaps, large, small, minheap, maxheap
    # heaps should be equal size, that is, size difference should be >1
    def __init__(self):
        self.small, self.large = [], []         #small= maxheap, large=minheap, in python heap can be initialized by list

    # Complexity all heap operations here are O(logn)
    def addNum(self, num: int) -> None:
        heapq.heappush(self.small, -1 * num)       # push in the maxheap or minheap with negative values

        # make sure every num in small <= every num in large
        if self.small and self.large and -1 * self.small[0] > self.large[0]:    #small[0] = max value of maxheap and large[0] = smallest value in minheap                
            val = -1 * heapq.heappop(self.small)                                # -1 to get the actual value                           
            heapq.heappush(self.large, val)

        # uneven lengths?
        if len(self.small) > len(self.large)+1 :
            val = -1 * heapq.heappop(self.small)                                 # -1 to get the actual value
            heapq.heappush(self.large, val)
        if len(self.large) > len(self.small)+1 : 
            val = heapq.heappop(self.large)                                 # -1 to get the actual value
            heapq.heappush(self.small, -1 * val)  

        

    def findMedian(self) -> float:
        if len(self.small)> len(self.large):
            return -1 * self.small[0]
        if len(self.large)> len(self.small):
            return self.large[0]
        return (-1 * self.small[0] + self.large[0]) / 2  
        


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()
----------------------------------------------------------------------------------------------------

