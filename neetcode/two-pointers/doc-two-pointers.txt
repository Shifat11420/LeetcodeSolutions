                                         TWO POINTERS


Problem - 125
# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
# Given a string s, return true if it is a palindrome, or false otherwise.

# Example 1:
# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.

# Example 2:
# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.

# Example 3:
# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.
 
# Constraints:
# 1 <= s.length <= 2 * 105
# s consists only of printable ASCII characters.


# Complexity: time O(n), space O(1)
class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s)-1

        while l<r:
            while l<r and not self.alnumeric(s[l]):
                l += 1
            while r>l and not self.alnumeric(s[r]):
                r -= 1
            if s[r].lower() != s[l].lower():
                return False 
            l, r = l+1, r-1
        return True               

    def alnumeric(self, c: str) -> bool:
        return (ord("A") <= ord(c) <= ord("Z") or
            ord("a") <= ord(c) <= ord("z") or
            ord("0") <= ord(c) <= ord("9"))

s = "race a car"  
new = Solution
print(new().isPalindrome(s))     
---------------------------------------------------------------------------

Problem - 167
# Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
# Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
# The tests are generated such that there is exactly one solution. You may not use the same element twice.
# Your solution must use only constant extra space.

# Example 1:
# Input: numbers = [2,7,11,15], target = 9
# Output: [1,2]
# Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

# Example 2:
# Input: numbers = [2,3,4], target = 6
# Output: [1,3]
# Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

# Example 3:
# Input: numbers = [-1,0], target = -1
# Output: [1,2]
# Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 
# Constraints:
# 2 <= numbers.length <= 3 * 104
# -1000 <= numbers[i] <= 1000
# numbers is sorted in non-decreasing order.
# -1000 <= target <= 1000
# The tests are generated such that there is exactly one solution.

# Complexity: time O(n), space O(1)
from typing import List

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l, r =0, len(numbers)-1

        while l<r:
            currentSum = numbers[l] + numbers[r]
            if currentSum > target:
                r -= 1
            elif currentSum < target:
                l += 1
            else:
                return [l+1, r+1]  ## since index is 1-based, not 0-based        
        return []        

numbers = [2,3,4]
target = 6
new = Solution
print(new().twoSum(numbers,target))
------------------------------------------------------------------------------

Problem - 15
# Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
# Notice that the solution set must not contain duplicate triplets.

# Example 1:
# Input: nums = [-1,0,1,2,-1,-4]
# Output: [[-1,-1,2],[-1,0,1]]
# Explanation: 
# nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
# nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
# nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
# The distinct triplets are [-1,0,1] and [-1,-1,2].
# Notice that the order of the output and the order of the triplets does not matter.

# Example 2:
# Input: nums = [0,1,1]
# Output: []
# Explanation: The only possible triplet does not sum up to 0.

# Example 3:
# Input: nums = [0,0,0]
# Output: [[0,0,0]]
# Explanation: The only possible triplet sums up to 0.


# Complexity: time O(nlogn + n^2) ---> O(n^2), space O(1) to O(n)
from typing import List

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        for i, a in enumerate(nums):
            if i>0 and  a == nums[i-1]:
                continue
            l, r = i+1, len(nums)-1
            while l < r:
                threesum = a + nums[l] + nums[r]
                if threesum > 0:
                    r -= 1
                elif threesum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]])        
                    l += 1
                    while nums[l] == nums[l-1] and l<r:
                        l += 1
        return res

nums = [-1,0,1,2,-1,-4]
new = Solution
print(new().threeSum(nums))        
----------------------------------------------------------------------------

Problem - 11
# You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
# Find two lines that together with the x-axis form a container, such that the container contains the most water.
# Return the maximum amount of water a container can store.
# Notice that you may not slant the container.

# https://leetcode.com/problems/container-with-most-water/
# class Solution:
#     def maxArea(self, height: List[int]) -> int:

#Complexity: time O(n)
from typing import List

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l, r = 0, len(height)-1
        res = 0

        while l<r:
            area = (r-l) * min(height[l], height[r])
            res = max(area, res)

            if height[l] < height[r]:
                l += 1
            else:
                r -= 1    
        return res

height =  [1,8,6,2,5,4,8,3,7]   
new = Solution
print(new().maxArea(height))        
------------------------------------------------------------------

Problem - 42
#Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
#https://leetcode.com/problems/trapping-rain-water/

from typing import List

# Complexity: time O(n), space O(1)
class Solution:
    def trap(self, height: List[int]) -> int:
        l, r = 0, len(height)-1
        maxleft, maxright = 0, 0
        water = 0

        while l < r:
            if height[l] < height[r]:
                maxleft = max(maxleft, height[l])
                water += maxleft-height[l]
                l += 1
            else:
                maxright = max(maxright, height[r])
                water += maxright-height[r]
                r -= 1
        return water        



height = [0,1,0,2,1,0,1,3,2,1,2,1]
new = Solution
print(new().trap(height))
-----------------------------------------------------------------------------------------------
