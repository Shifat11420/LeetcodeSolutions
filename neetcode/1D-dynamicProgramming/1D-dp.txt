                        1D DYNAMIC PROGRAMMING


Problem - 70
# You are climbing a staircase. It takes n steps to reach the top.
# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

# Example 1:
# Input: n = 2
# Output: 2
# Explanation: There are two ways to climb to the top.
# 1. 1 step + 1 step
# 2. 2 steps

# Example 2:
# Input: n = 3
# Output: 3
# Explanation: There are three ways to climb to the top.
# 1. 1 step + 1 step + 1 step
# 2. 1 step + 2 steps
# 3. 2 steps + 1 step
 
# neetcode description is the best *** 
# solving with DFS is O(2^n) because of repeated work
# Idea: Caching aka memoization, DP -bottom up, start at end and use subproblems ---think about how fibonnacci works
# Complexity: O(n)

class Solution:
    def climbStairs(self, n: int) -> int:
        one, two = 1, 1
        
        for i in range(n-1):
            temp = one             # shifting .,.,.,two,one to .,.,two,one,.
            one = one+two
            two = temp
        return one   
-------------------------------------------------------------------------------------

Problem - 746
# You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.
# You can either start from the step with index 0, or the step with index 1.
# Return the minimum cost to reach the top of the floor.

# Example 1:
# Input: cost = [10,15,20]
# Output: 15
# Explanation: You will start at index 1.
# - Pay 15 and climb two steps to reach the top.
# The total cost is 15.

# Example 2:
# Input: cost = [1,100,1,1,1,100,1,1,100,1]
# Output: 6
# Explanation: You will start at index 0.
# - Pay 1 and climb two steps to reach index 2.
# - Pay 1 and climb two steps to reach index 4.
# - Pay 1 and climb two steps to reach index 6.
# - Pay 1 and climb one step to reach index 7.
# - Pay 1 and climb two steps to reach index 9.
# - Pay 1 and climb one step to reach the top.
# The total cost is 6.

# can't be greedy and jump 2 steps every time because cost can vary
# brute force O(2^n) , n = len(cost array), 2 brunches of decision tree

# Complexity: time O(n), space O(1) with DP bottom up

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        cost.append(0)     #[10,15,20]0
        
        for i in range(len(cost)-3, -1, -1):       # start from 15 in the array and go reverse order
            cost[i] += min(cost[i+1], cost[i+2])   # mincost among 1 step and 2 step taken
            
        return min(cost[0],cost[1])    
-------------------------------------------------------------------------------------

Problem - 198
# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

# Example 1:
# Input: nums = [1,2,3,1]
# Output: 4
# Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
# Total amount you can rob = 1 + 3 = 4.

# Example 2:
# Input: nums = [2,7,9,3,1]
# Output: 12
# Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
# Total amount you can rob = 2 + 9 + 1 = 12.
 
#inorder DP
# Complexity: time O(n), space O(1)
from typing import List

class Solution:
    def rob(self, nums: List[int]) -> int:
        rob1, rob2 = 0, 0
        
        # [rob1, rob2, n, n+1, n+2,...]
        for n in nums:
            temp = max(n+rob1, rob2)   #doing at nth vale, then shift inorder
            rob1= rob2
            rob2 = temp
            
        return rob2     # at the end of loop, rob2 will be at last    
------------------------------------------------------------------------------------

Problem - 213
# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

# Example 1:
# Input: nums = [2,3,2]
# Output: 3
# Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

# Example 2:
# Input: nums = [1,2,3,1]
# Output: 4
# Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
# Total amount you can rob = 1 + 3 = 4.

# Example 3:
# Input: nums = [1,2,3]
# Output: 3

# Complexity : time O(n), space O(1)
from typing import List

class Solution:
    def rob(self, nums: List[int]) -> int:
        return max(nums[0], self.helper(nums[1:]), self.helper(nums[:-1]))  # nums[0] --> if len(nums)=1, then skipping 1st or last values to avoid adjacency
        
    # [rob1, rob2, n, n+1, n+2,...]    
    def helper(self, nums):
        rob1, rob2 = 0,0
        
        for n in nums:
            newRob = max(rob1+n, rob2)   # at nth value
            rob1 = rob2
            rob2 = newRob
        return rob2   # at the end of loop     
----------------------------------------------------------------------------------

Problem - 5
# Given a string s, return the longest palindromic substring in s.
# A string is called a palindrome string if the reverse of that string is the same as the original string.

# Example 1:
# Input: s = "babad"
# Output: "bab"
# Explanation: "aba" is also a valid answer.

# Example 2:
# Input: s = "cbbd"
# Output: "bb"

# start from the middle and check the palindrome outwords in every single position
# Complexity: O(n*n)--> O(n^2)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        reslen = 0
        
        for i in range(len(s)):
            # odd length
            l, r = i, i
            while l>=0 and r < len(s) and s[l]==s[r]:
                if (r-l+1) > reslen:
                    res = s[l:r+1]
                    reslen = r-l+1
                l -= 1
                r += 1
                
            # even length
            l, r = i, i+1
            while l>=0 and r < len(s) and s[l]==s[r]:
                if (r-l+1) > reslen:
                    res = s[l:r+1]
                    reslen = r-l+1
                l -= 1
                r += 1    
        return res      
--------------------------------------------------------------------------------------

Problem - 647
# Given a string s, return the number of palindromic substrings in it.
# A string is a palindrome when it reads the same backward as forward.
# A substring is a contiguous sequence of characters within the string.

# Example 1:
# Input: s = "abc"
# Output: 3
# Explanation: Three palindromic strings: "a", "b", "c".

# Example 2:
# Input: s = "aaa"
# Output: 6
# Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

# Complexity: time O(n*n)+O(n*n)---> O(n^2) (for odd n*n and even n*n where starting every single position and going outward to the end-->n and doing it for every single character --->n)

class Solution:
    def countSubstrings(self, s: str) -> int:
        res = 0
        
        for i in range(len(s)):
            l = r = i
            while l>=0 and r<len(s) and s[l]==s[r]:
                res += 1
                l -= 1
                r += 1

            l, r = i, i+1
            while l>=0 and r<len(s) and s[l]==s[r]:
                res += 1
                l -= 1
                r += 1
        return res        
------------------------------------------------------------------------------------

Problem - 91
# A message containing letters from A-Z can be encoded into numbers using the following mapping:
# 'A' -> "1"
# 'B' -> "2"
# ...
# 'Z' -> "26"
# To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:
# "AAJF" with the grouping (1 1 10 6)
# "KJF" with the grouping (11 10 6)
# Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".
# Given a string s containing only digits, return the number of ways to decode it.
# The test cases are generated so that the answer fits in a 32-bit integer.

# Example 1:
# Input: s = "12"
# Output: 2
# Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).

# Example 2:
# Input: s = "226"
# Output: 3
# Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

# Example 3:
# Input: s = "06"
# Output: 0
# Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").

# no loop, every single position 2 different decision O(1)
# size of cache n
# Complexicity: time O(n), space O(n) with recursive caching
# space O(1) with DP, we don't need a full array, just two variables like fibonacci

class Solution:
    #recursive DFS solution, time O(n), space O(n)
    def numDecodings(self, s: str) -> int:
        dp = {len(s): 1} # base case, empty string
        
        def dfs(i):
            if i in dp:    # either i visited or i at end
                return dp[i]
            if s[i] == "0":
                return 0
            
            res = dfs(i+1)
            if (i+1<len(s) and (s[i]=="1" or (s[i]=="2" and s[i+1] in "0123456") )):
                res += dfs(i+2)
            dp[i] = res    
            return res
        return dfs(0)         
                
    # DP solution, time O(n), space O(1)
    def numDecodings(self, s: str) -> int:    
        dp = {len(s): 1}
        
        for i in range(len(s)-1, -1, -1):  #starting at the end, go reverse order
            if s[i] == "0":
                dp[i] = 0
            else:
                dp[i] = dp[i+1]
                
            if (i+1<len(s) and (s[i]=="1" or (s[i]=="2" and s[i+1] in "0123456") )):
                dp[i] += dp[i+2]
        return dp[0]
------------------------------------------------------------------------------------

Problem - 322
# You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
# Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
# You may assume that you have an infinite number of each kind of coin.

# Example 1:
# Input: coins = [1,2,5], amount = 11
# Output: 3
# Explanation: 11 = 5 + 5 + 1

# Example 2:
# Input: coins = [2], amount = 3
# Output: -1

# Example 3:
# Input: coins = [1], amount = 0
# Output: 0
 
# Complexity: time O(amount*no of coins), space O(amount), we will cache for every single value till amount
from typing import List

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [amount+1] * (amount+1)  # [maxvalue]* we will calculate  0 to amount
        dp[0] = 0   # base case
        
        for a in range(1, amount+1):  # go reverse 1,2,3..
            for c in coins:
                if (a-c)>=0:
                    dp[a] = min(dp[a], 1+dp[a-c])  # a=7, c=4 ,dp[7] = 1+dp[3]  # recursive relation
        return dp[amount] if dp[amount]!= (amount+1) else -1             
----------------------------------------------------------------------------

Problem - 152
# Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.
# The test cases are generated so that the answer will fit in a 32-bit integer.
# A subarray is a contiguous subsequence of the array.

# Example 1:
# Input: nums = [2,3,-2,4]
# Output: 6
# Explanation: [2,3] has the largest product 6.

# Example 2:
# Input: nums = [-2,0,-1]
# Output: 0
# Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

# Idea: keep track of max and min both to have all the info in the subarray. e.g. [-1,-2,-3] for (-1*-2) * -3 = -6 but max is -2*-3 = 6 and we dont want to miss that 
# For zero, reset max and min to 1
# Complexity: time O(n), space O(1)

from typing import List

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = max(nums)  # base case for single element list
        curMax, curMin = 1, 1
        
        for n in nums:
            if n == 0:
                curMax , curMin = 1, 1
                continue
            tmp = n * curMax
            curMax = max(n * curMax, n* curMin, n)
            curMin = min(tmp , n* curMin, n)
            res = max(res, curMax)
        return res  
---------------------------------------------------------------------------------------

Problem - 139
# Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
# Note that the same word in the dictionary may be reused multiple times in the segmentation.

# Example 1:
# Input: s = "leetcode", wordDict = ["leet","code"]
# Output: true
# Explanation: Return true because "leetcode" can be segmented as "leet code".

# Example 2:
# Input: s = "applepenapple", wordDict = ["apple","pen"]
# Output: true
# Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
# Note that you are allowed to reuse a dictionary word.

# Example 3:
# Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
# Output: false

# s = 'leetcode', w = 'leet'
# dp[8]= dp[0+len(w)]=dp[4]=True
# Complexity: O(n*m*n), n = len(s) (go through every single position), m = len(wordDict), n for matching
from typing import List
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False] * (len(s)+1)   # 1 for base case
        dp[len(s)] = True           # base case
        
        for i in range(len(s)-1, -1, -1): # go reverse
            for w in wordDict:
                if i+len(w) <= len(s) and s[i:i+len(w)]==w:
                    dp[i] = dp[i+len(w)]
                if dp[i]:                 # if it's true, no need to check anymore, go to next iteration
                    break
                    
        return dp[0]            
-----------------------------------------------------------------------------------

Problem - 300
# Given an integer array nums, return the length of the longest strictly increasing subsequence.
# A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

# Example 1:
# Input: nums = [10,9,2,5,3,7,101,18]
# Output: 4
# Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

# Example 2:
# Input: nums = [0,1,0,3,2,3]
# Output: 4

# Example 3:
# Input: nums = [7,7,7,7,7,7,7]
# Output: 1

# Complexity: O(n^2) #iterate through every value from end, and every value that comes after it
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        LIS = [1] * len(nums)  #cache, longest subsequent integer
        
        for i in range(len(nums)-1, -1, -1):
            for j in range(i+1, len(nums)):
                if nums[i]<nums[j]:
                    LIS[i]= max(LIS[i], 1+LIS[j])
        return max(LIS)                            
-----------------------------------------------------------------------------------------------

Problem - 416
# Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

# Example 1:
# Input: nums = [1,5,11,5]
# Output: true
# Explanation: The array can be partitioned as [1, 5, 5] and [11].

# Example 2:
# Input: nums = [1,2,3,5]
# Output: false
# Explanation: The array cannot be partitioned into equal sum subsets.

# Complexity: time O(sum(nums)), space O(sum(nums))
from typing import List

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        if sum(nums)%2:
            return False
        target = sum(nums)//2
        
        dp =set()
        dp.add(0)
        for i in range(len(nums)-1, -1, -1):
            nextDP = set()
            for t in dp:
                if t + nums[i] == target:
                    return True
                nextDP.add(t+nums[i])
                nextDP.add(t)
            dp = nextDP    
        return True if target in dp else False         
------------------------------------------------------------------------------------------        
    
        

        

