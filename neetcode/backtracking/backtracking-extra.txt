

						Backtracking - extra


Problem - 77. Combinations
-------------------------------------------------------
Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

Example 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Example 2:
Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.

------------------------------------------------------------
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res = []
       
        def helper(i, cur, res):
            if len(cur)==k:
               res.append(cur.copy())
               return
            if i>n:
                return   

            for j in range(i, n+1):
                cur.append(j)
                helper(j+1, cur, res)
                cur.pop()

        helper(1, [], res)
        return res

-------------------------------------------------------
Problem - 47. Permutations II
------------------------------------------------------------
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 
-------------------------------------------------------
# Time : O(n*2^n) or O(n*n!)
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        res  = []
        perm = []
        count = {}
        for n in nums:
            count[n] = 1 + count.get(n, 0)

        def dfs():
            if len(perm) == len(nums):
                res.append(perm.copy())
                return

            for n in count:
                if count[n]>0:
                    perm.append(n)
                    count[n] -= 1
                    dfs()

                    count[n] += 1
                    perm.pop()                       
        dfs()
        return res        


------------------------------------------------------------
Problem - 93. Restore IP Addresses
-------------------------------------------------------
A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

Example 1:
Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]

Example 2:
Input: s = "0000"
Output: ["0.0.0.0"]

Example 3:
Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
------------------------------------------------------------
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        length = len(s)
        if length<4 or length>12:
            return []
        res = []

        def dfs(i, cur, dots):
            if i==len(s) and dots==4:
                res.append(cur[:-1])
                return
            
            for j in range(i, min(i+3,len(s))):
                if j-i+1>1 and s[i]=="0":
                    return
                if int(s[i:j+1])>255:
                    return
                prevcur = cur
                cur += s[i:j+1]+"."             
                dfs(j+1, cur, dots+1)
                cur = prevcur   

        dfs(0, "", 0)
        return res        
        

------------------------------------------------------
Problem - 473. Matchsticks to Square
------------------------------------------------------------------
You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Return true if you can make this square and false otherwise.

Example 1:
Input: matchsticks = [1,1,2,2,2]
Output: true
Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.

Example 2:
Input: matchsticks = [3,3,3,3,4]
Output: false
Explanation: You cannot find a way to form a square with all the matchsticks.
-------------------------------------------------------
# Time: O(4^n)
class Solution:
    def makesquare(self, matchsticks: List[int]) -> bool:
        length = sum(matchsticks)//4

        if sum(matchsticks)/4 != length:
            return False
        sides = [0]*4

        matchsticks.sort(reverse=True)
        def backtrack(i):
            if i==len(matchsticks):
                return True

            for j in range(4):
                if sides[j]+matchsticks[i]<=length:
                    sides[j] += matchsticks[i]
                    if backtrack(i+1):
                        return True
                    sides[j] -= matchsticks[i] 
            return False

        return backtrack(0)                       

------------------------------------------------------------
Problem - 1849. Splitting a String Into Descending Consecutive Values
------------------------------------------------------
You are given a string s that consists of only digits.
Check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.
For example, the string s = "0090089" can be split into ["0090", "089"] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.
Another example, the string s = "001" can be split into ["0", "01"], ["00", "1"], or ["0", "0", "1"]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.
Return true if it is possible to split s​​​​​​ as described above, or false otherwise.

A substring is a contiguous sequence of characters in a string.

Example 1:
Input: s = "1234"
Output: false
Explanation: There is no valid way to split s.

Example 2:
Input: s = "050043"
Output: true
Explanation: s can be split into ["05", "004", "3"] with numerical values [5,4,3].
The values are in descending order with adjacent values differing by 1.

Example 3:
Input: s = "9080701"
Output: false
Explanation: There is no valid way to split s.
 
------------------------------------------------------------------
class Solution:
    def splitString(self, s: str) -> bool:

        def dfs(index, prev):
            if index==len(s):              
                return True

            for j in range(index, len(s)):
                val = int(s[index:j+1])
                if val+1==prev and dfs(j+1,val):
                    return True 
            return False        
   
        for i in range(len(s)-1):
            val = int(s[:i+1])
            if dfs(i+1, val):
                return True
        return False

-------------------------------------------------------
Problem -1980. Find Unique Binary String
------------------------------------------------------------
Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

Example 1:
Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.

Example 2:
Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.

Example 3:
Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
------------------------------------------------------
# Time: O(n^2), actually n(n+1) for n+1 tries (worst case) and search in the set is n operations
class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        strset = {n for n in nums} #set(nums)

        def backtrack(i, cur):
            if i == len(nums):
                res = "".join(cur)
                return None if res in strset else res 
        
            res = backtrack(i+1, cur)
            if res: return res

            cur[i] = "1"
            res = backtrack(i+1, cur)
            if res: return res 
        
        
        cur = ["0" for n in nums]
        return backtrack(0, cur)   
        
------------------------------------------------------------------

Problem -1239. Maximum Length of a Concatenated String with Unique Characters
---------------------------------------------------
You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.
Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
----------------------------------------------------
class Solution:
    maxlen = 0
    def maxLength(self, arr: List[str]) -> int:
        self.helper(0, arr, "")
        return self.maxlen    

    def helper(self,  i, arr, cur):
        if i==len(arr):
            if len(set(cur)) == len(cur):
                self.maxlen = max(self.maxlen, len(cur))                   
            return
         
        self.helper(i+1, arr, cur+arr[i])
        self.helper(i+1, arr, cur)    

-------------------------------------------------------------------

Problem -698- Partition to K Equal Sum Subsets
------------------------------------------------------
Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.

Example 1:
Input: nums = [4,3,2,3,5,2,1], k = 4
Output: true
Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.

Example 2:
Input: nums = [1,2,3,4], k = 3
Output: false

------------------------------------------
# Time: O(k*2^n), 2 decisions (include or not), height of tree is n and  k times
class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        target = sum(nums)//k
        if (sum(nums)%k)!=0:
            return False
        used = [False]*len(nums)    
        nums.sort(reverse=True)

        def helper(i,count, subsetsum):
            if k==count:
                return True
            if subsetsum==target:
                return helper(0, count+1, 0)

            for j in range(i, len(nums)):
                if used[j] or subsetsum+nums[j] > target:
                    continue
                if j>i and not used[j-1] and nums[j]==nums[j-1]:
                    continue

                used[j] = True    
                if helper(j+1, count, subsetsum+nums[j]):
                    return True
                used[j] = False
            return False            

        return helper(0, 0, 0)
--------------------------------------------------------------------


Problem- 52  N-Queens II
------------------------
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return the number of distinct solutions to the n-queens puzzle.

Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.

Example 2:
Input: n = 1
Output: 1
---------------------------------
class Solution:
    def totalNQueens(self, n: int) -> int:
        posDiag = set()
        negDiag = set()
        col = set()

        def backtrack(r):
            if r==n:
                return 1
            count = 0
            for c in range(n):
                if c in col or r+c in posDiag or r-c in negDiag:
                    continue
                col.add(c)
                posDiag.add(r+c)
                negDiag.add(r-c)

                count += backtrack(r+1)

                col.remove(c)
                posDiag.remove(r+c)
                negDiag.remove(r-c) 
            return count
        return backtrack(0)
-----------------------------------------------------------------------
        
        

